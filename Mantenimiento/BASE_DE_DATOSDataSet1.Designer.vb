'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("BASE_DE_DATOSDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class BASE_DE_DATOSDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable
    
    Private tableHOJA_DE_VIDA_DE_LA_MAQUINA As HOJA_DE_VIDA_DE_LA_MAQUINADataTable
    
    Private tableORDEN_DE_TRABAJO As ORDEN_DE_TRABAJODataTable
    
    Private tableREGISTRO_DE_MANTENIMIENTO As REGISTRO_DE_MANTENIMIENTODataTable
    
    Private tableREPUESTOS_DISPONIBLES As REPUESTOS_DISPONIBLESDataTable
    
    Private tableSOLICITUD_DE_REPUESTOS As SOLICITUD_DE_REPUESTOSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CARACTERISTICAS TECNICAS DE LA MAQUINA")) Is Nothing) Then
                MyBase.Tables.Add(New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable(ds.Tables("CARACTERISTICAS TECNICAS DE LA MAQUINA")))
            End If
            If (Not (ds.Tables("HOJA DE VIDA DE LA MAQUINA")) Is Nothing) Then
                MyBase.Tables.Add(New HOJA_DE_VIDA_DE_LA_MAQUINADataTable(ds.Tables("HOJA DE VIDA DE LA MAQUINA")))
            End If
            If (Not (ds.Tables("ORDEN DE TRABAJO")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_DE_TRABAJODataTable(ds.Tables("ORDEN DE TRABAJO")))
            End If
            If (Not (ds.Tables("REGISTRO DE MANTENIMIENTO")) Is Nothing) Then
                MyBase.Tables.Add(New REGISTRO_DE_MANTENIMIENTODataTable(ds.Tables("REGISTRO DE MANTENIMIENTO")))
            End If
            If (Not (ds.Tables("REPUESTOS DISPONIBLES")) Is Nothing) Then
                MyBase.Tables.Add(New REPUESTOS_DISPONIBLESDataTable(ds.Tables("REPUESTOS DISPONIBLES")))
            End If
            If (Not (ds.Tables("SOLICITUD DE REPUESTOS")) Is Nothing) Then
                MyBase.Tables.Add(New SOLICITUD_DE_REPUESTOSDataTable(ds.Tables("SOLICITUD DE REPUESTOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CARACTERISTICAS_TECNICAS_DE_LA_MAQUINA() As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable
        Get
            Return Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HOJA_DE_VIDA_DE_LA_MAQUINA() As HOJA_DE_VIDA_DE_LA_MAQUINADataTable
        Get
            Return Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDEN_DE_TRABAJO() As ORDEN_DE_TRABAJODataTable
        Get
            Return Me.tableORDEN_DE_TRABAJO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REGISTRO_DE_MANTENIMIENTO() As REGISTRO_DE_MANTENIMIENTODataTable
        Get
            Return Me.tableREGISTRO_DE_MANTENIMIENTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPUESTOS_DISPONIBLES() As REPUESTOS_DISPONIBLESDataTable
        Get
            Return Me.tableREPUESTOS_DISPONIBLES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SOLICITUD_DE_REPUESTOS() As SOLICITUD_DE_REPUESTOSDataTable
        Get
            Return Me.tableSOLICITUD_DE_REPUESTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As BASE_DE_DATOSDataSet = CType(MyBase.Clone,BASE_DE_DATOSDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("CARACTERISTICAS TECNICAS DE LA MAQUINA")) Is Nothing) Then
                MyBase.Tables.Add(New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable(ds.Tables("CARACTERISTICAS TECNICAS DE LA MAQUINA")))
            End If
            If (Not (ds.Tables("HOJA DE VIDA DE LA MAQUINA")) Is Nothing) Then
                MyBase.Tables.Add(New HOJA_DE_VIDA_DE_LA_MAQUINADataTable(ds.Tables("HOJA DE VIDA DE LA MAQUINA")))
            End If
            If (Not (ds.Tables("ORDEN DE TRABAJO")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_DE_TRABAJODataTable(ds.Tables("ORDEN DE TRABAJO")))
            End If
            If (Not (ds.Tables("REGISTRO DE MANTENIMIENTO")) Is Nothing) Then
                MyBase.Tables.Add(New REGISTRO_DE_MANTENIMIENTODataTable(ds.Tables("REGISTRO DE MANTENIMIENTO")))
            End If
            If (Not (ds.Tables("REPUESTOS DISPONIBLES")) Is Nothing) Then
                MyBase.Tables.Add(New REPUESTOS_DISPONIBLESDataTable(ds.Tables("REPUESTOS DISPONIBLES")))
            End If
            If (Not (ds.Tables("SOLICITUD DE REPUESTOS")) Is Nothing) Then
                MyBase.Tables.Add(New SOLICITUD_DE_REPUESTOSDataTable(ds.Tables("SOLICITUD DE REPUESTOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA = CType(MyBase.Tables("CARACTERISTICAS TECNICAS DE LA MAQUINA"),CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA) Is Nothing) Then
                Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.InitVars
            End If
        End If
        Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA = CType(MyBase.Tables("HOJA DE VIDA DE LA MAQUINA"),HOJA_DE_VIDA_DE_LA_MAQUINADataTable)
        If (initTable = true) Then
            If (Not (Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA) Is Nothing) Then
                Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.InitVars
            End If
        End If
        Me.tableORDEN_DE_TRABAJO = CType(MyBase.Tables("ORDEN DE TRABAJO"),ORDEN_DE_TRABAJODataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDEN_DE_TRABAJO) Is Nothing) Then
                Me.tableORDEN_DE_TRABAJO.InitVars
            End If
        End If
        Me.tableREGISTRO_DE_MANTENIMIENTO = CType(MyBase.Tables("REGISTRO DE MANTENIMIENTO"),REGISTRO_DE_MANTENIMIENTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableREGISTRO_DE_MANTENIMIENTO) Is Nothing) Then
                Me.tableREGISTRO_DE_MANTENIMIENTO.InitVars
            End If
        End If
        Me.tableREPUESTOS_DISPONIBLES = CType(MyBase.Tables("REPUESTOS DISPONIBLES"),REPUESTOS_DISPONIBLESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPUESTOS_DISPONIBLES) Is Nothing) Then
                Me.tableREPUESTOS_DISPONIBLES.InitVars
            End If
        End If
        Me.tableSOLICITUD_DE_REPUESTOS = CType(MyBase.Tables("SOLICITUD DE REPUESTOS"),SOLICITUD_DE_REPUESTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSOLICITUD_DE_REPUESTOS) Is Nothing) Then
                Me.tableSOLICITUD_DE_REPUESTOS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "BASE_DE_DATOSDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BASE_DE_DATOSDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA = New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable()
        MyBase.Tables.Add(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA)
        Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA = New HOJA_DE_VIDA_DE_LA_MAQUINADataTable()
        MyBase.Tables.Add(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA)
        Me.tableORDEN_DE_TRABAJO = New ORDEN_DE_TRABAJODataTable()
        MyBase.Tables.Add(Me.tableORDEN_DE_TRABAJO)
        Me.tableREGISTRO_DE_MANTENIMIENTO = New REGISTRO_DE_MANTENIMIENTODataTable()
        MyBase.Tables.Add(Me.tableREGISTRO_DE_MANTENIMIENTO)
        Me.tableREPUESTOS_DISPONIBLES = New REPUESTOS_DISPONIBLESDataTable()
        MyBase.Tables.Add(Me.tableREPUESTOS_DISPONIBLES)
        Me.tableSOLICITUD_DE_REPUESTOS = New SOLICITUD_DE_REPUESTOSDataTable()
        MyBase.Tables.Add(Me.tableSOLICITUD_DE_REPUESTOS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeHOJA_DE_VIDA_DE_LA_MAQUINA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeORDEN_DE_TRABAJO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeREGISTRO_DE_MANTENIMIENTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeREPUESTOS_DISPONIBLES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSOLICITUD_DE_REPUESTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEventHandler(ByVal sender As Object, ByVal e As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEventHandler(ByVal sender As Object, ByVal e As HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ORDEN_DE_TRABAJORowChangeEventHandler(ByVal sender As Object, ByVal e As ORDEN_DE_TRABAJORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub REGISTRO_DE_MANTENIMIENTORowChangeEventHandler(ByVal sender As Object, ByVal e As REGISTRO_DE_MANTENIMIENTORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub REPUESTOS_DISPONIBLESRowChangeEventHandler(ByVal sender As Object, ByVal e As REPUESTOS_DISPONIBLESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub SOLICITUD_DE_REPUESTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As SOLICITUD_DE_REPUESTOSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable
        Inherits Global.System.Data.TypedTableBase(Of CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnTIPO_DE_ALIMENTACION_ELEC As Global.System.Data.DataColumn
        
        Private columnVOLTAJE_QUE_MANEJA As Global.System.Data.DataColumn
        
        Private columnFECHA_INICIO_FUNCIONAMIENTO As Global.System.Data.DataColumn
        
        Private columnNOTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CARACTERISTICAS TECNICAS DE LA MAQUINA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_DE_ALIMENTACION_ELECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DE_ALIMENTACION_ELEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VOLTAJE_QUE_MANEJAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLTAJE_QUE_MANEJA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_INICIO_FUNCIONAMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO_FUNCIONAMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
            Get
                Return CType(Me.Rows(index),CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChanging As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChanged As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowDeleting As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowDeleted As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow(ByVal row As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow(ByVal CODIGO As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal TIPO_DE_ALIMENTACION_ELEC As String, ByVal VOLTAJE_QUE_MANEJA As String, ByVal FECHA_INICIO_FUNCIONAMIENTO As Date, ByVal NOTA As String) As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
            Dim rowCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow = CType(Me.NewRow,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
            Dim columnValuesArray() As Object = New Object() {CODIGO, NOMBRE_DE_LA_MAQUINA, TIPO_DE_ALIMENTACION_ELEC, VOLTAJE_QUE_MANEJA, FECHA_INICIO_FUNCIONAMIENTO, NOTA}
            rowCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
            Return rowCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByCODIGO(ByVal CODIGO As Integer) As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
            Return CType(Me.Rows.Find(New Object() {CODIGO}),CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable = CType(MyBase.Clone,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_DE_LA_MAQUINA = MyBase.Columns("NOMBRE DE LA MAQUINA")
            Me.columnTIPO_DE_ALIMENTACION_ELEC = MyBase.Columns("TIPO DE ALIMENTACION ELEC")
            Me.columnVOLTAJE_QUE_MANEJA = MyBase.Columns("VOLTAJE QUE MANEJA")
            Me.columnFECHA_INICIO_FUNCIONAMIENTO = MyBase.Columns("FECHA INICIO FUNCIONAMIENTO")
            Me.columnNOTA = MyBase.Columns("NOTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_DE_LA_MAQUINA = New Global.System.Data.DataColumn("NOMBRE DE LA MAQUINA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DE_LA_MAQUINA)
            Me.columnTIPO_DE_ALIMENTACION_ELEC = New Global.System.Data.DataColumn("TIPO DE ALIMENTACION ELEC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DE_ALIMENTACION_ELEC)
            Me.columnVOLTAJE_QUE_MANEJA = New Global.System.Data.DataColumn("VOLTAJE QUE MANEJA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLTAJE_QUE_MANEJA)
            Me.columnFECHA_INICIO_FUNCIONAMIENTO = New Global.System.Data.DataColumn("FECHA INICIO FUNCIONAMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO_FUNCIONAMIENTO)
            Me.columnNOTA = New Global.System.Data.DataColumn("NOTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO}, true))
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.Unique = true
            Me.columnNOMBRE_DE_LA_MAQUINA.MaxLength = 255
            Me.columnTIPO_DE_ALIMENTACION_ELEC.MaxLength = 25
            Me.columnVOLTAJE_QUE_MANEJA.MaxLength = 20
            Me.columnNOTA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow() As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
            Return CType(Me.NewRow,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangedEvent) Is Nothing) Then
                RaiseEvent CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChanged(Me, New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEvent(CType(e.Row,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangingEvent) Is Nothing) Then
                RaiseEvent CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChanging(Me, New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEvent(CType(e.Row,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowDeletedEvent) Is Nothing) Then
                RaiseEvent CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowDeleted(Me, New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEvent(CType(e.Row,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowDeletingEvent) Is Nothing) Then
                RaiseEvent CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowDeleting(Me, New CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEvent(CType(e.Row,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow(ByVal row As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HOJA_DE_VIDA_DE_LA_MAQUINADataTable
        Inherits Global.System.Data.TypedTableBase(Of HOJA_DE_VIDA_DE_LA_MAQUINARow)
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnREFERENCIA As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnTIPO_DE_MAQUINA As Global.System.Data.DataColumn
        
        Private columnFECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Data.DataColumn
        
        Private columnINGRESO_AL_SISTEMA_FECHA As Global.System.Data.DataColumn
        
        Private columnCOSTO_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnNOTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HOJA DE VIDA DE LA MAQUINA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property REFERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_DE_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DE_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_DE_INGRESO_A_LA_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DE_INGRESO_A_LA_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property INGRESO_AL_SISTEMA_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESO_AL_SISTEMA_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COSTO_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTO_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HOJA_DE_VIDA_DE_LA_MAQUINARow
            Get
                Return CType(Me.Rows(index),HOJA_DE_VIDA_DE_LA_MAQUINARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event HOJA_DE_VIDA_DE_LA_MAQUINARowChanging As HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event HOJA_DE_VIDA_DE_LA_MAQUINARowChanged As HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event HOJA_DE_VIDA_DE_LA_MAQUINARowDeleting As HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event HOJA_DE_VIDA_DE_LA_MAQUINARowDeleted As HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddHOJA_DE_VIDA_DE_LA_MAQUINARow(ByVal row As HOJA_DE_VIDA_DE_LA_MAQUINARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddHOJA_DE_VIDA_DE_LA_MAQUINARow(ByVal CODIGO As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal REFERENCIA As String, ByVal MARCA As String, ByVal TIPO_DE_MAQUINA As String, ByVal FECHA_DE_INGRESO_A_LA_EMPRESA As Date, ByVal INGRESO_AL_SISTEMA_FECHA As Date, ByVal COSTO_DE_LA_MAQUINA As Decimal, ByVal NOTA As String) As HOJA_DE_VIDA_DE_LA_MAQUINARow
            Dim rowHOJA_DE_VIDA_DE_LA_MAQUINARow As HOJA_DE_VIDA_DE_LA_MAQUINARow = CType(Me.NewRow,HOJA_DE_VIDA_DE_LA_MAQUINARow)
            Dim columnValuesArray() As Object = New Object() {CODIGO, NOMBRE_DE_LA_MAQUINA, REFERENCIA, MARCA, TIPO_DE_MAQUINA, FECHA_DE_INGRESO_A_LA_EMPRESA, INGRESO_AL_SISTEMA_FECHA, COSTO_DE_LA_MAQUINA, NOTA}
            rowHOJA_DE_VIDA_DE_LA_MAQUINARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHOJA_DE_VIDA_DE_LA_MAQUINARow)
            Return rowHOJA_DE_VIDA_DE_LA_MAQUINARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByCODIGO(ByVal CODIGO As Integer) As HOJA_DE_VIDA_DE_LA_MAQUINARow
            Return CType(Me.Rows.Find(New Object() {CODIGO}),HOJA_DE_VIDA_DE_LA_MAQUINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HOJA_DE_VIDA_DE_LA_MAQUINADataTable = CType(MyBase.Clone,HOJA_DE_VIDA_DE_LA_MAQUINADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HOJA_DE_VIDA_DE_LA_MAQUINADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE_DE_LA_MAQUINA = MyBase.Columns("NOMBRE DE LA MAQUINA")
            Me.columnREFERENCIA = MyBase.Columns("REFERENCIA")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnTIPO_DE_MAQUINA = MyBase.Columns("TIPO DE MAQUINA")
            Me.columnFECHA_DE_INGRESO_A_LA_EMPRESA = MyBase.Columns("FECHA DE INGRESO A LA EMPRESA")
            Me.columnINGRESO_AL_SISTEMA_FECHA = MyBase.Columns("INGRESO AL SISTEMA FECHA")
            Me.columnCOSTO_DE_LA_MAQUINA = MyBase.Columns("COSTO DE LA MAQUINA")
            Me.columnNOTA = MyBase.Columns("NOTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE_DE_LA_MAQUINA = New Global.System.Data.DataColumn("NOMBRE DE LA MAQUINA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DE_LA_MAQUINA)
            Me.columnREFERENCIA = New Global.System.Data.DataColumn("REFERENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnTIPO_DE_MAQUINA = New Global.System.Data.DataColumn("TIPO DE MAQUINA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DE_MAQUINA)
            Me.columnFECHA_DE_INGRESO_A_LA_EMPRESA = New Global.System.Data.DataColumn("FECHA DE INGRESO A LA EMPRESA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DE_INGRESO_A_LA_EMPRESA)
            Me.columnINGRESO_AL_SISTEMA_FECHA = New Global.System.Data.DataColumn("INGRESO AL SISTEMA FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO_AL_SISTEMA_FECHA)
            Me.columnCOSTO_DE_LA_MAQUINA = New Global.System.Data.DataColumn("COSTO DE LA MAQUINA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_DE_LA_MAQUINA)
            Me.columnNOTA = New Global.System.Data.DataColumn("NOTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO}, true))
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.Unique = true
            Me.columnNOMBRE_DE_LA_MAQUINA.MaxLength = 25
            Me.columnREFERENCIA.MaxLength = 25
            Me.columnMARCA.MaxLength = 20
            Me.columnTIPO_DE_MAQUINA.MaxLength = 20
            Me.columnNOTA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewHOJA_DE_VIDA_DE_LA_MAQUINARow() As HOJA_DE_VIDA_DE_LA_MAQUINARow
            Return CType(Me.NewRow,HOJA_DE_VIDA_DE_LA_MAQUINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HOJA_DE_VIDA_DE_LA_MAQUINARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HOJA_DE_VIDA_DE_LA_MAQUINARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HOJA_DE_VIDA_DE_LA_MAQUINARowChangedEvent) Is Nothing) Then
                RaiseEvent HOJA_DE_VIDA_DE_LA_MAQUINARowChanged(Me, New HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEvent(CType(e.Row,HOJA_DE_VIDA_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HOJA_DE_VIDA_DE_LA_MAQUINARowChangingEvent) Is Nothing) Then
                RaiseEvent HOJA_DE_VIDA_DE_LA_MAQUINARowChanging(Me, New HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEvent(CType(e.Row,HOJA_DE_VIDA_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HOJA_DE_VIDA_DE_LA_MAQUINARowDeletedEvent) Is Nothing) Then
                RaiseEvent HOJA_DE_VIDA_DE_LA_MAQUINARowDeleted(Me, New HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEvent(CType(e.Row,HOJA_DE_VIDA_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HOJA_DE_VIDA_DE_LA_MAQUINARowDeletingEvent) Is Nothing) Then
                RaiseEvent HOJA_DE_VIDA_DE_LA_MAQUINARowDeleting(Me, New HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEvent(CType(e.Row,HOJA_DE_VIDA_DE_LA_MAQUINARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveHOJA_DE_VIDA_DE_LA_MAQUINARow(ByVal row As HOJA_DE_VIDA_DE_LA_MAQUINARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HOJA_DE_VIDA_DE_LA_MAQUINADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDEN_DE_TRABAJODataTable
        Inherits Global.System.Data.TypedTableBase(Of ORDEN_DE_TRABAJORow)
        
        Private columnCODIGO_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnTIPO_DE_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private _columnN__ORDEN_DE_TRABAJO As Global.System.Data.DataColumn
        
        Private columnFECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnFECHA_DEL_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnTRABAJO_A_REALIZAR As Global.System.Data.DataColumn
        
        Private columnMOTIVO As Global.System.Data.DataColumn
        
        Private columnORDENA As Global.System.Data.DataColumn
        
        Private columnCOLABORADOR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDEN DE TRABAJO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_DE_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DE_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property _N__ORDEN_DE_TRABAJOColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnN__ORDEN_DE_TRABAJO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_DE_LA_ORDEN_DE_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DE_LA_ORDEN_DE_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_DEL_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DEL_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TRABAJO_A_REALIZARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRABAJO_A_REALIZAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MOTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ORDENAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDENA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COLABORADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLABORADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDEN_DE_TRABAJORow
            Get
                Return CType(Me.Rows(index),ORDEN_DE_TRABAJORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ORDEN_DE_TRABAJORowChanging As ORDEN_DE_TRABAJORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ORDEN_DE_TRABAJORowChanged As ORDEN_DE_TRABAJORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ORDEN_DE_TRABAJORowDeleting As ORDEN_DE_TRABAJORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ORDEN_DE_TRABAJORowDeleted As ORDEN_DE_TRABAJORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddORDEN_DE_TRABAJORow(ByVal row As ORDEN_DE_TRABAJORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddORDEN_DE_TRABAJORow(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal TIPO_DE_MANTENIMIENTO As String, ByVal _N__ORDEN_DE_TRABAJO As String, ByVal FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Date, ByVal FECHA_DEL_MANTENIMIENTO As Date, ByVal TRABAJO_A_REALIZAR As String, ByVal MOTIVO As String, ByVal ORDENA As String, ByVal COLABORADOR As String) As ORDEN_DE_TRABAJORow
            Dim rowORDEN_DE_TRABAJORow As ORDEN_DE_TRABAJORow = CType(Me.NewRow,ORDEN_DE_TRABAJORow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_DE_LA_MAQUINA, NOMBRE_DE_LA_MAQUINA, TIPO_DE_MANTENIMIENTO, _N__ORDEN_DE_TRABAJO, FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO, FECHA_DEL_MANTENIMIENTO, TRABAJO_A_REALIZAR, MOTIVO, ORDENA, COLABORADOR}
            rowORDEN_DE_TRABAJORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDEN_DE_TRABAJORow)
            Return rowORDEN_DE_TRABAJORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBy_N__ORDEN_DE_TRABAJO(ByVal _N__ORDEN_DE_TRABAJO As String) As ORDEN_DE_TRABAJORow
            Return CType(Me.Rows.Find(New Object() {_N__ORDEN_DE_TRABAJO}),ORDEN_DE_TRABAJORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDEN_DE_TRABAJODataTable = CType(MyBase.Clone,ORDEN_DE_TRABAJODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDEN_DE_TRABAJODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODIGO_DE_LA_MAQUINA = MyBase.Columns("CODIGO DE LA MAQUINA")
            Me.columnNOMBRE_DE_LA_MAQUINA = MyBase.Columns("NOMBRE DE LA MAQUINA")
            Me.columnTIPO_DE_MANTENIMIENTO = MyBase.Columns("TIPO DE MANTENIMIENTO")
            Me._columnN__ORDEN_DE_TRABAJO = MyBase.Columns("N° ORDEN DE TRABAJO")
            Me.columnFECHA_DE_LA_ORDEN_DE_MANTENIMIENTO = MyBase.Columns("FECHA DE LA ORDEN DE MANTENIMIENTO")
            Me.columnFECHA_DEL_MANTENIMIENTO = MyBase.Columns("FECHA DEL MANTENIMIENTO")
            Me.columnTRABAJO_A_REALIZAR = MyBase.Columns("TRABAJO A REALIZAR")
            Me.columnMOTIVO = MyBase.Columns("MOTIVO")
            Me.columnORDENA = MyBase.Columns("ORDENA")
            Me.columnCOLABORADOR = MyBase.Columns("COLABORADOR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODIGO_DE_LA_MAQUINA = New Global.System.Data.DataColumn("CODIGO DE LA MAQUINA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DE_LA_MAQUINA)
            Me.columnNOMBRE_DE_LA_MAQUINA = New Global.System.Data.DataColumn("NOMBRE DE LA MAQUINA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DE_LA_MAQUINA)
            Me.columnTIPO_DE_MANTENIMIENTO = New Global.System.Data.DataColumn("TIPO DE MANTENIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DE_MANTENIMIENTO)
            Me._columnN__ORDEN_DE_TRABAJO = New Global.System.Data.DataColumn("N° ORDEN DE TRABAJO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnN__ORDEN_DE_TRABAJO.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnN__ORDEN_DE_TRABAJO")
            Me._columnN__ORDEN_DE_TRABAJO.ExtendedProperties.Add("Generator_UserColumnName", "N° ORDEN DE TRABAJO")
            MyBase.Columns.Add(Me._columnN__ORDEN_DE_TRABAJO)
            Me.columnFECHA_DE_LA_ORDEN_DE_MANTENIMIENTO = New Global.System.Data.DataColumn("FECHA DE LA ORDEN DE MANTENIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DE_LA_ORDEN_DE_MANTENIMIENTO)
            Me.columnFECHA_DEL_MANTENIMIENTO = New Global.System.Data.DataColumn("FECHA DEL MANTENIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DEL_MANTENIMIENTO)
            Me.columnTRABAJO_A_REALIZAR = New Global.System.Data.DataColumn("TRABAJO A REALIZAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRABAJO_A_REALIZAR)
            Me.columnMOTIVO = New Global.System.Data.DataColumn("MOTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOTIVO)
            Me.columnORDENA = New Global.System.Data.DataColumn("ORDENA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDENA)
            Me.columnCOLABORADOR = New Global.System.Data.DataColumn("COLABORADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLABORADOR)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me._columnN__ORDEN_DE_TRABAJO}, true))
            Me.columnNOMBRE_DE_LA_MAQUINA.MaxLength = 25
            Me.columnTIPO_DE_MANTENIMIENTO.MaxLength = 25
            Me._columnN__ORDEN_DE_TRABAJO.AllowDBNull = false
            Me._columnN__ORDEN_DE_TRABAJO.Unique = true
            Me._columnN__ORDEN_DE_TRABAJO.MaxLength = 255
            Me.columnTRABAJO_A_REALIZAR.MaxLength = 536870910
            Me.columnMOTIVO.MaxLength = 536870910
            Me.columnORDENA.MaxLength = 25
            Me.columnCOLABORADOR.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewORDEN_DE_TRABAJORow() As ORDEN_DE_TRABAJORow
            Return CType(Me.NewRow,ORDEN_DE_TRABAJORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDEN_DE_TRABAJORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDEN_DE_TRABAJORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDEN_DE_TRABAJORowChangedEvent) Is Nothing) Then
                RaiseEvent ORDEN_DE_TRABAJORowChanged(Me, New ORDEN_DE_TRABAJORowChangeEvent(CType(e.Row,ORDEN_DE_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDEN_DE_TRABAJORowChangingEvent) Is Nothing) Then
                RaiseEvent ORDEN_DE_TRABAJORowChanging(Me, New ORDEN_DE_TRABAJORowChangeEvent(CType(e.Row,ORDEN_DE_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDEN_DE_TRABAJORowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDEN_DE_TRABAJORowDeleted(Me, New ORDEN_DE_TRABAJORowChangeEvent(CType(e.Row,ORDEN_DE_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDEN_DE_TRABAJORowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDEN_DE_TRABAJORowDeleting(Me, New ORDEN_DE_TRABAJORowChangeEvent(CType(e.Row,ORDEN_DE_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveORDEN_DE_TRABAJORow(ByVal row As ORDEN_DE_TRABAJORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDEN_DE_TRABAJODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REGISTRO_DE_MANTENIMIENTODataTable
        Inherits Global.System.Data.TypedTableBase(Of REGISTRO_DE_MANTENIMIENTORow)
        
        Private columnCODIGO_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private _columnN__DE_ORDEN As Global.System.Data.DataColumn
        
        Private columnFECHA_DE_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnTRABAJO_REALIZADO As Global.System.Data.DataColumn
        
        Private columnPERSONA_QUE_REALIZA_EL_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnTIPO_DE_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnTIEMPO_DE_REPARACION_EN_HORAS As Global.System.Data.DataColumn
        
        Private columnTIEMPO As Global.System.Data.DataColumn
        
        Private columnCODAP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REGISTRO DE MANTENIMIENTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property _N__DE_ORDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnN__DE_ORDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_DE_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DE_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TRABAJO_REALIZADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRABAJO_REALIZADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PERSONA_QUE_REALIZA_EL_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERSONA_QUE_REALIZA_EL_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIPO_DE_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DE_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIEMPO_DE_REPARACION_EN_HORASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIEMPO_DE_REPARACION_EN_HORAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TIEMPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIEMPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODAPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODAP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REGISTRO_DE_MANTENIMIENTORow
            Get
                Return CType(Me.Rows(index),REGISTRO_DE_MANTENIMIENTORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REGISTRO_DE_MANTENIMIENTORowChanging As REGISTRO_DE_MANTENIMIENTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REGISTRO_DE_MANTENIMIENTORowChanged As REGISTRO_DE_MANTENIMIENTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REGISTRO_DE_MANTENIMIENTORowDeleting As REGISTRO_DE_MANTENIMIENTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REGISTRO_DE_MANTENIMIENTORowDeleted As REGISTRO_DE_MANTENIMIENTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddREGISTRO_DE_MANTENIMIENTORow(ByVal row As REGISTRO_DE_MANTENIMIENTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddREGISTRO_DE_MANTENIMIENTORow(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal _N__DE_ORDEN As String, ByVal FECHA_DE_MANTENIMIENTO As Date, ByVal TRABAJO_REALIZADO As String, ByVal PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String, ByVal TIPO_DE_MANTENIMIENTO As String, ByVal TIEMPO_DE_REPARACION_EN_HORAS As Short, ByVal TIEMPO As Integer, ByVal CODAP As Integer) As REGISTRO_DE_MANTENIMIENTORow
            Dim rowREGISTRO_DE_MANTENIMIENTORow As REGISTRO_DE_MANTENIMIENTORow = CType(Me.NewRow,REGISTRO_DE_MANTENIMIENTORow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_DE_LA_MAQUINA, NOMBRE_DE_LA_MAQUINA, _N__DE_ORDEN, FECHA_DE_MANTENIMIENTO, TRABAJO_REALIZADO, PERSONA_QUE_REALIZA_EL_MANTENIMIENTO, TIPO_DE_MANTENIMIENTO, TIEMPO_DE_REPARACION_EN_HORAS, TIEMPO, CODAP}
            rowREGISTRO_DE_MANTENIMIENTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREGISTRO_DE_MANTENIMIENTORow)
            Return rowREGISTRO_DE_MANTENIMIENTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBy_N__DE_ORDEN(ByVal _N__DE_ORDEN As String) As REGISTRO_DE_MANTENIMIENTORow
            Return CType(Me.Rows.Find(New Object() {_N__DE_ORDEN}),REGISTRO_DE_MANTENIMIENTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REGISTRO_DE_MANTENIMIENTODataTable = CType(MyBase.Clone,REGISTRO_DE_MANTENIMIENTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REGISTRO_DE_MANTENIMIENTODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODIGO_DE_LA_MAQUINA = MyBase.Columns("CODIGO DE LA MAQUINA")
            Me.columnNOMBRE_DE_LA_MAQUINA = MyBase.Columns("NOMBRE DE LA MAQUINA")
            Me._columnN__DE_ORDEN = MyBase.Columns("N° DE ORDEN")
            Me.columnFECHA_DE_MANTENIMIENTO = MyBase.Columns("FECHA DE MANTENIMIENTO")
            Me.columnTRABAJO_REALIZADO = MyBase.Columns("TRABAJO REALIZADO")
            Me.columnPERSONA_QUE_REALIZA_EL_MANTENIMIENTO = MyBase.Columns("PERSONA QUE REALIZA EL MANTENIMIENTO")
            Me.columnTIPO_DE_MANTENIMIENTO = MyBase.Columns("TIPO DE MANTENIMIENTO")
            Me.columnTIEMPO_DE_REPARACION_EN_HORAS = MyBase.Columns("TIEMPO DE REPARACION EN HORAS")
            Me.columnTIEMPO = MyBase.Columns("TIEMPO")
            Me.columnCODAP = MyBase.Columns("CODAP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODIGO_DE_LA_MAQUINA = New Global.System.Data.DataColumn("CODIGO DE LA MAQUINA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DE_LA_MAQUINA)
            Me.columnNOMBRE_DE_LA_MAQUINA = New Global.System.Data.DataColumn("NOMBRE DE LA MAQUINA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DE_LA_MAQUINA)
            Me._columnN__DE_ORDEN = New Global.System.Data.DataColumn("N° DE ORDEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnN__DE_ORDEN.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnN__DE_ORDEN")
            Me._columnN__DE_ORDEN.ExtendedProperties.Add("Generator_UserColumnName", "N° DE ORDEN")
            MyBase.Columns.Add(Me._columnN__DE_ORDEN)
            Me.columnFECHA_DE_MANTENIMIENTO = New Global.System.Data.DataColumn("FECHA DE MANTENIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DE_MANTENIMIENTO)
            Me.columnTRABAJO_REALIZADO = New Global.System.Data.DataColumn("TRABAJO REALIZADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRABAJO_REALIZADO)
            Me.columnPERSONA_QUE_REALIZA_EL_MANTENIMIENTO = New Global.System.Data.DataColumn("PERSONA QUE REALIZA EL MANTENIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERSONA_QUE_REALIZA_EL_MANTENIMIENTO)
            Me.columnTIPO_DE_MANTENIMIENTO = New Global.System.Data.DataColumn("TIPO DE MANTENIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DE_MANTENIMIENTO)
            Me.columnTIEMPO_DE_REPARACION_EN_HORAS = New Global.System.Data.DataColumn("TIEMPO DE REPARACION EN HORAS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIEMPO_DE_REPARACION_EN_HORAS)
            Me.columnTIEMPO = New Global.System.Data.DataColumn("TIEMPO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIEMPO)
            Me.columnCODAP = New Global.System.Data.DataColumn("CODAP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODAP)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me._columnN__DE_ORDEN}, true))
            Me.columnNOMBRE_DE_LA_MAQUINA.MaxLength = 255
            Me._columnN__DE_ORDEN.AllowDBNull = false
            Me._columnN__DE_ORDEN.Unique = true
            Me._columnN__DE_ORDEN.MaxLength = 25
            Me.columnTRABAJO_REALIZADO.MaxLength = 255
            Me.columnPERSONA_QUE_REALIZA_EL_MANTENIMIENTO.MaxLength = 255
            Me.columnTIPO_DE_MANTENIMIENTO.MaxLength = 255
            Me.columnCODAP.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewREGISTRO_DE_MANTENIMIENTORow() As REGISTRO_DE_MANTENIMIENTORow
            Return CType(Me.NewRow,REGISTRO_DE_MANTENIMIENTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REGISTRO_DE_MANTENIMIENTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REGISTRO_DE_MANTENIMIENTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REGISTRO_DE_MANTENIMIENTORowChangedEvent) Is Nothing) Then
                RaiseEvent REGISTRO_DE_MANTENIMIENTORowChanged(Me, New REGISTRO_DE_MANTENIMIENTORowChangeEvent(CType(e.Row,REGISTRO_DE_MANTENIMIENTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REGISTRO_DE_MANTENIMIENTORowChangingEvent) Is Nothing) Then
                RaiseEvent REGISTRO_DE_MANTENIMIENTORowChanging(Me, New REGISTRO_DE_MANTENIMIENTORowChangeEvent(CType(e.Row,REGISTRO_DE_MANTENIMIENTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REGISTRO_DE_MANTENIMIENTORowDeletedEvent) Is Nothing) Then
                RaiseEvent REGISTRO_DE_MANTENIMIENTORowDeleted(Me, New REGISTRO_DE_MANTENIMIENTORowChangeEvent(CType(e.Row,REGISTRO_DE_MANTENIMIENTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REGISTRO_DE_MANTENIMIENTORowDeletingEvent) Is Nothing) Then
                RaiseEvent REGISTRO_DE_MANTENIMIENTORowDeleting(Me, New REGISTRO_DE_MANTENIMIENTORowChangeEvent(CType(e.Row,REGISTRO_DE_MANTENIMIENTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveREGISTRO_DE_MANTENIMIENTORow(ByVal row As REGISTRO_DE_MANTENIMIENTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REGISTRO_DE_MANTENIMIENTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPUESTOS_DISPONIBLESDataTable
        Inherits Global.System.Data.TypedTableBase(Of REPUESTOS_DISPONIBLESRow)
        
        Private columnREFERENCIA_DE_REPUESTO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DEL_REPUESTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD_DISPONIBLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPUESTOS DISPONIBLES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property REFERENCIA_DE_REPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_DE_REPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DEL_REPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DEL_REPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CANTIDAD_DISPONIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD_DISPONIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPUESTOS_DISPONIBLESRow
            Get
                Return CType(Me.Rows(index),REPUESTOS_DISPONIBLESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REPUESTOS_DISPONIBLESRowChanging As REPUESTOS_DISPONIBLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REPUESTOS_DISPONIBLESRowChanged As REPUESTOS_DISPONIBLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REPUESTOS_DISPONIBLESRowDeleting As REPUESTOS_DISPONIBLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event REPUESTOS_DISPONIBLESRowDeleted As REPUESTOS_DISPONIBLESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddREPUESTOS_DISPONIBLESRow(ByVal row As REPUESTOS_DISPONIBLESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddREPUESTOS_DISPONIBLESRow(ByVal REFERENCIA_DE_REPUESTO As Integer, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD_DISPONIBLE As Integer) As REPUESTOS_DISPONIBLESRow
            Dim rowREPUESTOS_DISPONIBLESRow As REPUESTOS_DISPONIBLESRow = CType(Me.NewRow,REPUESTOS_DISPONIBLESRow)
            Dim columnValuesArray() As Object = New Object() {REFERENCIA_DE_REPUESTO, NOMBRE_DEL_REPUESTO, CANTIDAD_DISPONIBLE}
            rowREPUESTOS_DISPONIBLESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPUESTOS_DISPONIBLESRow)
            Return rowREPUESTOS_DISPONIBLESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByREFERENCIA_DE_REPUESTO(ByVal REFERENCIA_DE_REPUESTO As Integer) As REPUESTOS_DISPONIBLESRow
            Return CType(Me.Rows.Find(New Object() {REFERENCIA_DE_REPUESTO}),REPUESTOS_DISPONIBLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPUESTOS_DISPONIBLESDataTable = CType(MyBase.Clone,REPUESTOS_DISPONIBLESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPUESTOS_DISPONIBLESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnREFERENCIA_DE_REPUESTO = MyBase.Columns("REFERENCIA DE REPUESTO")
            Me.columnNOMBRE_DEL_REPUESTO = MyBase.Columns("NOMBRE DEL REPUESTO")
            Me.columnCANTIDAD_DISPONIBLE = MyBase.Columns("CANTIDAD DISPONIBLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnREFERENCIA_DE_REPUESTO = New Global.System.Data.DataColumn("REFERENCIA DE REPUESTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_DE_REPUESTO)
            Me.columnNOMBRE_DEL_REPUESTO = New Global.System.Data.DataColumn("NOMBRE DEL REPUESTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DEL_REPUESTO)
            Me.columnCANTIDAD_DISPONIBLE = New Global.System.Data.DataColumn("CANTIDAD DISPONIBLE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD_DISPONIBLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREFERENCIA_DE_REPUESTO}, true))
            Me.columnREFERENCIA_DE_REPUESTO.AllowDBNull = false
            Me.columnREFERENCIA_DE_REPUESTO.Unique = true
            Me.columnNOMBRE_DEL_REPUESTO.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewREPUESTOS_DISPONIBLESRow() As REPUESTOS_DISPONIBLESRow
            Return CType(Me.NewRow,REPUESTOS_DISPONIBLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPUESTOS_DISPONIBLESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPUESTOS_DISPONIBLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPUESTOS_DISPONIBLESRowChangedEvent) Is Nothing) Then
                RaiseEvent REPUESTOS_DISPONIBLESRowChanged(Me, New REPUESTOS_DISPONIBLESRowChangeEvent(CType(e.Row,REPUESTOS_DISPONIBLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPUESTOS_DISPONIBLESRowChangingEvent) Is Nothing) Then
                RaiseEvent REPUESTOS_DISPONIBLESRowChanging(Me, New REPUESTOS_DISPONIBLESRowChangeEvent(CType(e.Row,REPUESTOS_DISPONIBLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPUESTOS_DISPONIBLESRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPUESTOS_DISPONIBLESRowDeleted(Me, New REPUESTOS_DISPONIBLESRowChangeEvent(CType(e.Row,REPUESTOS_DISPONIBLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPUESTOS_DISPONIBLESRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPUESTOS_DISPONIBLESRowDeleting(Me, New REPUESTOS_DISPONIBLESRowChangeEvent(CType(e.Row,REPUESTOS_DISPONIBLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveREPUESTOS_DISPONIBLESRow(ByVal row As REPUESTOS_DISPONIBLESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPUESTOS_DISPONIBLESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SOLICITUD_DE_REPUESTOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SOLICITUD_DE_REPUESTOSRow)
        
        Private columnCODIGO_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DE_LA_MAQUINA As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_DE_REPUESTO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DEL_REPUESTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnNOMBRE_DE_QUIEN_SOLICITA As Global.System.Data.DataColumn
        
        Private columnFECHA_DE_SOLICITUD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SOLICITUD DE REPUESTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CODIGO_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DE_LA_MAQUINAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DE_LA_MAQUINA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property REFERENCIA_DE_REPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_DE_REPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DEL_REPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DEL_REPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NOMBRE_DE_QUIEN_SOLICITAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_DE_QUIEN_SOLICITA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FECHA_DE_SOLICITUDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DE_SOLICITUD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SOLICITUD_DE_REPUESTOSRow
            Get
                Return CType(Me.Rows(index),SOLICITUD_DE_REPUESTOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOLICITUD_DE_REPUESTOSRowChanging As SOLICITUD_DE_REPUESTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOLICITUD_DE_REPUESTOSRowChanged As SOLICITUD_DE_REPUESTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOLICITUD_DE_REPUESTOSRowDeleting As SOLICITUD_DE_REPUESTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SOLICITUD_DE_REPUESTOSRowDeleted As SOLICITUD_DE_REPUESTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSOLICITUD_DE_REPUESTOSRow(ByVal row As SOLICITUD_DE_REPUESTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSOLICITUD_DE_REPUESTOSRow(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal REFERENCIA_DE_REPUESTO As String, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD As Integer, ByVal NOMBRE_DE_QUIEN_SOLICITA As String, ByVal FECHA_DE_SOLICITUD As Date) As SOLICITUD_DE_REPUESTOSRow
            Dim rowSOLICITUD_DE_REPUESTOSRow As SOLICITUD_DE_REPUESTOSRow = CType(Me.NewRow,SOLICITUD_DE_REPUESTOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_DE_LA_MAQUINA, NOMBRE_DE_LA_MAQUINA, REFERENCIA_DE_REPUESTO, NOMBRE_DEL_REPUESTO, CANTIDAD, NOMBRE_DE_QUIEN_SOLICITA, FECHA_DE_SOLICITUD}
            rowSOLICITUD_DE_REPUESTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSOLICITUD_DE_REPUESTOSRow)
            Return rowSOLICITUD_DE_REPUESTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByFECHA_DE_SOLICITUD(ByVal FECHA_DE_SOLICITUD As Date) As SOLICITUD_DE_REPUESTOSRow
            Return CType(Me.Rows.Find(New Object() {FECHA_DE_SOLICITUD}),SOLICITUD_DE_REPUESTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SOLICITUD_DE_REPUESTOSDataTable = CType(MyBase.Clone,SOLICITUD_DE_REPUESTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SOLICITUD_DE_REPUESTOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODIGO_DE_LA_MAQUINA = MyBase.Columns("CODIGO DE LA MAQUINA")
            Me.columnNOMBRE_DE_LA_MAQUINA = MyBase.Columns("NOMBRE DE LA MAQUINA")
            Me.columnREFERENCIA_DE_REPUESTO = MyBase.Columns("REFERENCIA DE REPUESTO")
            Me.columnNOMBRE_DEL_REPUESTO = MyBase.Columns("NOMBRE DEL REPUESTO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnNOMBRE_DE_QUIEN_SOLICITA = MyBase.Columns("NOMBRE DE QUIEN SOLICITA")
            Me.columnFECHA_DE_SOLICITUD = MyBase.Columns("FECHA DE SOLICITUD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODIGO_DE_LA_MAQUINA = New Global.System.Data.DataColumn("CODIGO DE LA MAQUINA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DE_LA_MAQUINA)
            Me.columnNOMBRE_DE_LA_MAQUINA = New Global.System.Data.DataColumn("NOMBRE DE LA MAQUINA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DE_LA_MAQUINA)
            Me.columnREFERENCIA_DE_REPUESTO = New Global.System.Data.DataColumn("REFERENCIA DE REPUESTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_DE_REPUESTO)
            Me.columnNOMBRE_DEL_REPUESTO = New Global.System.Data.DataColumn("NOMBRE DEL REPUESTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DEL_REPUESTO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnNOMBRE_DE_QUIEN_SOLICITA = New Global.System.Data.DataColumn("NOMBRE DE QUIEN SOLICITA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_DE_QUIEN_SOLICITA)
            Me.columnFECHA_DE_SOLICITUD = New Global.System.Data.DataColumn("FECHA DE SOLICITUD", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DE_SOLICITUD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFECHA_DE_SOLICITUD}, true))
            Me.columnNOMBRE_DE_LA_MAQUINA.MaxLength = 25
            Me.columnREFERENCIA_DE_REPUESTO.MaxLength = 25
            Me.columnNOMBRE_DEL_REPUESTO.MaxLength = 25
            Me.columnNOMBRE_DE_QUIEN_SOLICITA.MaxLength = 25
            Me.columnFECHA_DE_SOLICITUD.AllowDBNull = false
            Me.columnFECHA_DE_SOLICITUD.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSOLICITUD_DE_REPUESTOSRow() As SOLICITUD_DE_REPUESTOSRow
            Return CType(Me.NewRow,SOLICITUD_DE_REPUESTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SOLICITUD_DE_REPUESTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SOLICITUD_DE_REPUESTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SOLICITUD_DE_REPUESTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent SOLICITUD_DE_REPUESTOSRowChanged(Me, New SOLICITUD_DE_REPUESTOSRowChangeEvent(CType(e.Row,SOLICITUD_DE_REPUESTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SOLICITUD_DE_REPUESTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent SOLICITUD_DE_REPUESTOSRowChanging(Me, New SOLICITUD_DE_REPUESTOSRowChangeEvent(CType(e.Row,SOLICITUD_DE_REPUESTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SOLICITUD_DE_REPUESTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SOLICITUD_DE_REPUESTOSRowDeleted(Me, New SOLICITUD_DE_REPUESTOSRowChangeEvent(CType(e.Row,SOLICITUD_DE_REPUESTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SOLICITUD_DE_REPUESTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SOLICITUD_DE_REPUESTOSRowDeleting(Me, New SOLICITUD_DE_REPUESTOSRowChangeEvent(CType(e.Row,SOLICITUD_DE_REPUESTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSOLICITUD_DE_REPUESTOSRow(ByVal row As SOLICITUD_DE_REPUESTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BASE_DE_DATOSDataSet = New BASE_DE_DATOSDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SOLICITUD_DE_REPUESTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
        Inherits Global.System.Data.DataRow
        
        Private tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA = CType(Me.Table,CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As Integer
            Get
                Return CType(Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DE_LA_MAQUINA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DE LA MAQUINA' de la tabla 'CARACTERISTICAS TECNIC"& _ 
                            "AS DE LA MAQUINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_DE_ALIMENTACION_ELEC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.TIPO_DE_ALIMENTACION_ELECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO DE ALIMENTACION ELEC' de la tabla 'CARACTERISTICAS T"& _ 
                            "ECNICAS DE LA MAQUINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.TIPO_DE_ALIMENTACION_ELECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VOLTAJE_QUE_MANEJA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.VOLTAJE_QUE_MANEJAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VOLTAJE QUE MANEJA' de la tabla 'CARACTERISTICAS TECNICAS"& _ 
                            " DE LA MAQUINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.VOLTAJE_QUE_MANEJAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_INICIO_FUNCIONAMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.FECHA_INICIO_FUNCIONAMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA INICIO FUNCIONAMIENTO' de la tabla 'CARACTERISTICAS"& _ 
                            " TECNICAS DE LA MAQUINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.FECHA_INICIO_FUNCIONAMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTA' de la tabla 'CARACTERISTICAS TECNICAS DE LA MAQUINA"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DE_LA_MAQUINANull()
            Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTIPO_DE_ALIMENTACION_ELECNull() As Boolean
            Return Me.IsNull(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.TIPO_DE_ALIMENTACION_ELECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTIPO_DE_ALIMENTACION_ELECNull()
            Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.TIPO_DE_ALIMENTACION_ELECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsVOLTAJE_QUE_MANEJANull() As Boolean
            Return Me.IsNull(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.VOLTAJE_QUE_MANEJAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetVOLTAJE_QUE_MANEJANull()
            Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.VOLTAJE_QUE_MANEJAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_INICIO_FUNCIONAMIENTONull() As Boolean
            Return Me.IsNull(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.FECHA_INICIO_FUNCIONAMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_INICIO_FUNCIONAMIENTONull()
            Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.FECHA_INICIO_FUNCIONAMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOTANull() As Boolean
            Return Me.IsNull(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOTANull()
            Me(Me.tableCARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.NOTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class HOJA_DE_VIDA_DE_LA_MAQUINARow
        Inherits Global.System.Data.DataRow
        
        Private tableHOJA_DE_VIDA_DE_LA_MAQUINA As HOJA_DE_VIDA_DE_LA_MAQUINADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA = CType(Me.Table,HOJA_DE_VIDA_DE_LA_MAQUINADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO() As Integer
            Get
                Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DE_LA_MAQUINA() As String
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DE LA MAQUINA' de la tabla 'HOJA DE VIDA DE LA MAQ"& _ 
                            "UINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property REFERENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.REFERENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'REFERENCIA' de la tabla 'HOJA DE VIDA DE LA MAQUINA' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.REFERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARCA() As String
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.MARCAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MARCA' de la tabla 'HOJA DE VIDA DE LA MAQUINA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_DE_MAQUINA() As String
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.TIPO_DE_MAQUINAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO DE MAQUINA' de la tabla 'HOJA DE VIDA DE LA MAQUINA'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.TIPO_DE_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_DE_INGRESO_A_LA_EMPRESA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.FECHA_DE_INGRESO_A_LA_EMPRESAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA DE INGRESO A LA EMPRESA' de la tabla 'HOJA DE VIDA "& _ 
                            "DE LA MAQUINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.FECHA_DE_INGRESO_A_LA_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property INGRESO_AL_SISTEMA_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.INGRESO_AL_SISTEMA_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESO AL SISTEMA FECHA' de la tabla 'HOJA DE VIDA DE LA"& _ 
                            " MAQUINA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.INGRESO_AL_SISTEMA_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COSTO_DE_LA_MAQUINA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.COSTO_DE_LA_MAQUINAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COSTO DE LA MAQUINA' de la tabla 'HOJA DE VIDA DE LA MAQU"& _ 
                            "INA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.COSTO_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTA' de la tabla 'HOJA DE VIDA DE LA MAQUINA' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DE_LA_MAQUINANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOMBRE_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsREFERENCIANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.REFERENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetREFERENCIANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.REFERENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMARCANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.MARCAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMARCANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.MARCAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTIPO_DE_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.TIPO_DE_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTIPO_DE_MAQUINANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.TIPO_DE_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_DE_INGRESO_A_LA_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.FECHA_DE_INGRESO_A_LA_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_DE_INGRESO_A_LA_EMPRESANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.FECHA_DE_INGRESO_A_LA_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsINGRESO_AL_SISTEMA_FECHANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.INGRESO_AL_SISTEMA_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetINGRESO_AL_SISTEMA_FECHANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.INGRESO_AL_SISTEMA_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCOSTO_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.COSTO_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCOSTO_DE_LA_MAQUINANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.COSTO_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOTANull() As Boolean
            Return Me.IsNull(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOTANull()
            Me(Me.tableHOJA_DE_VIDA_DE_LA_MAQUINA.NOTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ORDEN_DE_TRABAJORow
        Inherits Global.System.Data.DataRow
        
        Private tableORDEN_DE_TRABAJO As ORDEN_DE_TRABAJODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDEN_DE_TRABAJO = CType(Me.Table,ORDEN_DE_TRABAJODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_DE_LA_MAQUINA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.CODIGO_DE_LA_MAQUINAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO DE LA MAQUINA' de la tabla 'ORDEN DE TRABAJO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.CODIGO_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DE_LA_MAQUINA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.NOMBRE_DE_LA_MAQUINAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DE LA MAQUINA' de la tabla 'ORDEN DE TRABAJO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.NOMBRE_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_DE_MANTENIMIENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.TIPO_DE_MANTENIMIENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO DE MANTENIMIENTO' de la tabla 'ORDEN DE TRABAJO' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.TIPO_DE_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property _N__ORDEN_DE_TRABAJO() As String
            Get
                Return CType(Me(Me.tableORDEN_DE_TRABAJO._N__ORDEN_DE_TRABAJOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO._N__ORDEN_DE_TRABAJOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.FECHA_DE_LA_ORDEN_DE_MANTENIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA DE LA ORDEN DE MANTENIMIENTO' de la tabla 'ORDEN DE"& _ 
                            " TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.FECHA_DE_LA_ORDEN_DE_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_DEL_MANTENIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.FECHA_DEL_MANTENIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA DEL MANTENIMIENTO' de la tabla 'ORDEN DE TRABAJO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.FECHA_DEL_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TRABAJO_A_REALIZAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.TRABAJO_A_REALIZARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRABAJO A REALIZAR' de la tabla 'ORDEN DE TRABAJO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.TRABAJO_A_REALIZARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MOTIVO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.MOTIVOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOTIVO' de la tabla 'ORDEN DE TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.MOTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ORDENA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.ORDENAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ORDENA' de la tabla 'ORDEN DE TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.ORDENAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COLABORADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_DE_TRABAJO.COLABORADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLABORADOR' de la tabla 'ORDEN DE TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_DE_TRABAJO.COLABORADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCODIGO_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.CODIGO_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCODIGO_DE_LA_MAQUINANull()
            Me(Me.tableORDEN_DE_TRABAJO.CODIGO_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.NOMBRE_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DE_LA_MAQUINANull()
            Me(Me.tableORDEN_DE_TRABAJO.NOMBRE_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTIPO_DE_MANTENIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.TIPO_DE_MANTENIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTIPO_DE_MANTENIMIENTONull()
            Me(Me.tableORDEN_DE_TRABAJO.TIPO_DE_MANTENIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_DE_LA_ORDEN_DE_MANTENIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.FECHA_DE_LA_ORDEN_DE_MANTENIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_DE_LA_ORDEN_DE_MANTENIMIENTONull()
            Me(Me.tableORDEN_DE_TRABAJO.FECHA_DE_LA_ORDEN_DE_MANTENIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_DEL_MANTENIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.FECHA_DEL_MANTENIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_DEL_MANTENIMIENTONull()
            Me(Me.tableORDEN_DE_TRABAJO.FECHA_DEL_MANTENIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTRABAJO_A_REALIZARNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.TRABAJO_A_REALIZARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTRABAJO_A_REALIZARNull()
            Me(Me.tableORDEN_DE_TRABAJO.TRABAJO_A_REALIZARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMOTIVONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.MOTIVOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMOTIVONull()
            Me(Me.tableORDEN_DE_TRABAJO.MOTIVOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsORDENANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.ORDENAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetORDENANull()
            Me(Me.tableORDEN_DE_TRABAJO.ORDENAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCOLABORADORNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_DE_TRABAJO.COLABORADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCOLABORADORNull()
            Me(Me.tableORDEN_DE_TRABAJO.COLABORADORColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class REGISTRO_DE_MANTENIMIENTORow
        Inherits Global.System.Data.DataRow
        
        Private tableREGISTRO_DE_MANTENIMIENTO As REGISTRO_DE_MANTENIMIENTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREGISTRO_DE_MANTENIMIENTO = CType(Me.Table,REGISTRO_DE_MANTENIMIENTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_DE_LA_MAQUINA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.CODIGO_DE_LA_MAQUINAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO DE LA MAQUINA' de la tabla 'REGISTRO DE MANTENIMIE"& _ 
                            "NTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.CODIGO_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DE_LA_MAQUINA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.NOMBRE_DE_LA_MAQUINAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DE LA MAQUINA' de la tabla 'REGISTRO DE MANTENIMIE"& _ 
                            "NTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.NOMBRE_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property _N__DE_ORDEN() As String
            Get
                Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO._N__DE_ORDENColumn),String)
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO._N__DE_ORDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_DE_MANTENIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.FECHA_DE_MANTENIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA DE MANTENIMIENTO' de la tabla 'REGISTRO DE MANTENIM"& _ 
                            "IENTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.FECHA_DE_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TRABAJO_REALIZADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TRABAJO_REALIZADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRABAJO REALIZADO' de la tabla 'REGISTRO DE MANTENIMIENTO"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TRABAJO_REALIZADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PERSONA_QUE_REALIZA_EL_MANTENIMIENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.PERSONA_QUE_REALIZA_EL_MANTENIMIENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PERSONA QUE REALIZA EL MANTENIMIENTO' de la tabla 'REGIST"& _ 
                            "RO DE MANTENIMIENTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.PERSONA_QUE_REALIZA_EL_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIPO_DE_MANTENIMIENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIPO_DE_MANTENIMIENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO DE MANTENIMIENTO' de la tabla 'REGISTRO DE MANTENIMI"& _ 
                            "ENTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIPO_DE_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIEMPO_DE_REPARACION_EN_HORAS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPO_DE_REPARACION_EN_HORASColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIEMPO DE REPARACION EN HORAS' de la tabla 'REGISTRO DE M"& _ 
                            "ANTENIMIENTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPO_DE_REPARACION_EN_HORASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TIEMPO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIEMPO' de la tabla 'REGISTRO DE MANTENIMIENTO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODAP() As Integer
            Get
                Return CType(Me(Me.tableREGISTRO_DE_MANTENIMIENTO.CODAPColumn),Integer)
            End Get
            Set
                Me(Me.tableREGISTRO_DE_MANTENIMIENTO.CODAPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCODIGO_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.CODIGO_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCODIGO_DE_LA_MAQUINANull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.CODIGO_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.NOMBRE_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DE_LA_MAQUINANull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.NOMBRE_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFECHA_DE_MANTENIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.FECHA_DE_MANTENIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFECHA_DE_MANTENIMIENTONull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.FECHA_DE_MANTENIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTRABAJO_REALIZADONull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.TRABAJO_REALIZADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTRABAJO_REALIZADONull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TRABAJO_REALIZADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPERSONA_QUE_REALIZA_EL_MANTENIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.PERSONA_QUE_REALIZA_EL_MANTENIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPERSONA_QUE_REALIZA_EL_MANTENIMIENTONull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.PERSONA_QUE_REALIZA_EL_MANTENIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTIPO_DE_MANTENIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.TIPO_DE_MANTENIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTIPO_DE_MANTENIMIENTONull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIPO_DE_MANTENIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTIEMPO_DE_REPARACION_EN_HORASNull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPO_DE_REPARACION_EN_HORASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTIEMPO_DE_REPARACION_EN_HORASNull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPO_DE_REPARACION_EN_HORASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTIEMPONull() As Boolean
            Return Me.IsNull(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTIEMPONull()
            Me(Me.tableREGISTRO_DE_MANTENIMIENTO.TIEMPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class REPUESTOS_DISPONIBLESRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPUESTOS_DISPONIBLES As REPUESTOS_DISPONIBLESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPUESTOS_DISPONIBLES = CType(Me.Table,REPUESTOS_DISPONIBLESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property REFERENCIA_DE_REPUESTO() As Integer
            Get
                Return CType(Me(Me.tableREPUESTOS_DISPONIBLES.REFERENCIA_DE_REPUESTOColumn),Integer)
            End Get
            Set
                Me(Me.tableREPUESTOS_DISPONIBLES.REFERENCIA_DE_REPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DEL_REPUESTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPUESTOS_DISPONIBLES.NOMBRE_DEL_REPUESTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DEL REPUESTO' de la tabla 'REPUESTOS DISPONIBLES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPUESTOS_DISPONIBLES.NOMBRE_DEL_REPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CANTIDAD_DISPONIBLE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableREPUESTOS_DISPONIBLES.CANTIDAD_DISPONIBLEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD DISPONIBLE' de la tabla 'REPUESTOS DISPONIBLES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPUESTOS_DISPONIBLES.CANTIDAD_DISPONIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DEL_REPUESTONull() As Boolean
            Return Me.IsNull(Me.tableREPUESTOS_DISPONIBLES.NOMBRE_DEL_REPUESTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DEL_REPUESTONull()
            Me(Me.tableREPUESTOS_DISPONIBLES.NOMBRE_DEL_REPUESTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCANTIDAD_DISPONIBLENull() As Boolean
            Return Me.IsNull(Me.tableREPUESTOS_DISPONIBLES.CANTIDAD_DISPONIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCANTIDAD_DISPONIBLENull()
            Me(Me.tableREPUESTOS_DISPONIBLES.CANTIDAD_DISPONIBLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SOLICITUD_DE_REPUESTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSOLICITUD_DE_REPUESTOS As SOLICITUD_DE_REPUESTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSOLICITUD_DE_REPUESTOS = CType(Me.Table,SOLICITUD_DE_REPUESTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CODIGO_DE_LA_MAQUINA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.CODIGO_DE_LA_MAQUINAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO DE LA MAQUINA' de la tabla 'SOLICITUD DE REPUESTOS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.CODIGO_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DE_LA_MAQUINA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_LA_MAQUINAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DE LA MAQUINA' de la tabla 'SOLICITUD DE REPUESTOS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_LA_MAQUINAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property REFERENCIA_DE_REPUESTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.REFERENCIA_DE_REPUESTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'REFERENCIA DE REPUESTO' de la tabla 'SOLICITUD DE REPUEST"& _ 
                            "OS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.REFERENCIA_DE_REPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DEL_REPUESTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DEL_REPUESTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DEL REPUESTO' de la tabla 'SOLICITUD DE REPUESTOS'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DEL_REPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CANTIDAD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.CANTIDADColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'SOLICITUD DE REPUESTOS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NOMBRE_DE_QUIEN_SOLICITA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_QUIEN_SOLICITAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE DE QUIEN SOLICITA' de la tabla 'SOLICITUD DE REPUE"& _ 
                            "STOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_QUIEN_SOLICITAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FECHA_DE_SOLICITUD() As Date
            Get
                Return CType(Me(Me.tableSOLICITUD_DE_REPUESTOS.FECHA_DE_SOLICITUDColumn),Date)
            End Get
            Set
                Me(Me.tableSOLICITUD_DE_REPUESTOS.FECHA_DE_SOLICITUDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCODIGO_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableSOLICITUD_DE_REPUESTOS.CODIGO_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCODIGO_DE_LA_MAQUINANull()
            Me(Me.tableSOLICITUD_DE_REPUESTOS.CODIGO_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DE_LA_MAQUINANull() As Boolean
            Return Me.IsNull(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_LA_MAQUINAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DE_LA_MAQUINANull()
            Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_LA_MAQUINAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsREFERENCIA_DE_REPUESTONull() As Boolean
            Return Me.IsNull(Me.tableSOLICITUD_DE_REPUESTOS.REFERENCIA_DE_REPUESTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetREFERENCIA_DE_REPUESTONull()
            Me(Me.tableSOLICITUD_DE_REPUESTOS.REFERENCIA_DE_REPUESTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DEL_REPUESTONull() As Boolean
            Return Me.IsNull(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DEL_REPUESTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DEL_REPUESTONull()
            Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DEL_REPUESTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableSOLICITUD_DE_REPUESTOS.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tableSOLICITUD_DE_REPUESTOS.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNOMBRE_DE_QUIEN_SOLICITANull() As Boolean
            Return Me.IsNull(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_QUIEN_SOLICITAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNOMBRE_DE_QUIEN_SOLICITANull()
            Me(Me.tableSOLICITUD_DE_REPUESTOS.NOMBRE_DE_QUIEN_SOLICITAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class HOJA_DE_VIDA_DE_LA_MAQUINARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HOJA_DE_VIDA_DE_LA_MAQUINARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As HOJA_DE_VIDA_DE_LA_MAQUINARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As HOJA_DE_VIDA_DE_LA_MAQUINARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ORDEN_DE_TRABAJORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDEN_DE_TRABAJORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ORDEN_DE_TRABAJORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ORDEN_DE_TRABAJORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class REGISTRO_DE_MANTENIMIENTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REGISTRO_DE_MANTENIMIENTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As REGISTRO_DE_MANTENIMIENTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As REGISTRO_DE_MANTENIMIENTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class REPUESTOS_DISPONIBLESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPUESTOS_DISPONIBLESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As REPUESTOS_DISPONIBLESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As REPUESTOS_DISPONIBLESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class SOLICITUD_DE_REPUESTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SOLICITUD_DE_REPUESTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As SOLICITUD_DE_REPUESTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As SOLICITUD_DE_REPUESTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace BASE_DE_DATOSDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CARACTERISTICAS TECNICAS DE LA MAQUINA"
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE DE LA MAQUINA", "NOMBRE DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("TIPO DE ALIMENTACION ELEC", "TIPO DE ALIMENTACION ELEC")
            tableMapping.ColumnMappings.Add("VOLTAJE QUE MANEJA", "VOLTAJE QUE MANEJA")
            tableMapping.ColumnMappings.Add("FECHA INICIO FUNCIONAMIENTO", "FECHA INICIO FUNCIONAMIENTO")
            tableMapping.ColumnMappings.Add("NOTA", "NOTA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `CARACTERISTICAS TECNICAS DE LA MAQUINA` WHERE ((`CODIGO` = ?) AND (("& _ 
                "? = 1 AND `NOMBRE DE LA MAQUINA` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND ("& _ 
                "(? = 1 AND `TIPO DE ALIMENTACION ELEC` IS NULL) OR (`TIPO DE ALIMENTACION ELEC` "& _ 
                "= ?)) AND ((? = 1 AND `VOLTAJE QUE MANEJA` IS NULL) OR (`VOLTAJE QUE MANEJA` = ?"& _ 
                ")) AND ((? = 1 AND `FECHA INICIO FUNCIONAMIENTO` IS NULL) OR (`FECHA INICIO FUNC"& _ 
                "IONAMIENTO` = ?)) AND ((? = 1 AND `NOTA` IS NULL) OR (`NOTA` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_ALIMENTACION_ELEC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE ALIMENTACION ELEC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_ALIMENTACION_ELEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE ALIMENTACION ELEC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VOLTAJE_QUE_MANEJA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VOLTAJE QUE MANEJA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VOLTAJE_QUE_MANEJA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VOLTAJE QUE MANEJA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_INICIO_FUNCIONAMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA INICIO FUNCIONAMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_INICIO_FUNCIONAMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA INICIO FUNCIONAMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOTA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `CARACTERISTICAS TECNICAS DE LA MAQUINA` (`CODIGO`, `NOMBRE DE LA MAQ"& _ 
                "UINA`, `TIPO DE ALIMENTACION ELEC`, `VOLTAJE QUE MANEJA`, `FECHA INICIO FUNCIONA"& _ 
                "MIENTO`, `NOTA`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_ALIMENTACION_ELEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE ALIMENTACION ELEC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VOLTAJE_QUE_MANEJA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VOLTAJE QUE MANEJA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_INICIO_FUNCIONAMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA INICIO FUNCIONAMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `CARACTERISTICAS TECNICAS DE LA MAQUINA` SET `CODIGO` = ?, `NOMBRE DE LA M"& _ 
                "AQUINA` = ?, `TIPO DE ALIMENTACION ELEC` = ?, `VOLTAJE QUE MANEJA` = ?, `FECHA I"& _ 
                "NICIO FUNCIONAMIENTO` = ?, `NOTA` = ? WHERE ((`CODIGO` = ?) AND ((? = 1 AND `NOM"& _ 
                "BRE DE LA MAQUINA` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND ((? = 1 AND `TI"& _ 
                "PO DE ALIMENTACION ELEC` IS NULL) OR (`TIPO DE ALIMENTACION ELEC` = ?)) AND ((? "& _ 
                "= 1 AND `VOLTAJE QUE MANEJA` IS NULL) OR (`VOLTAJE QUE MANEJA` = ?)) AND ((? = 1"& _ 
                " AND `FECHA INICIO FUNCIONAMIENTO` IS NULL) OR (`FECHA INICIO FUNCIONAMIENTO` = "& _ 
                "?)) AND ((? = 1 AND `NOTA` IS NULL) OR (`NOTA` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_ALIMENTACION_ELEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE ALIMENTACION ELEC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VOLTAJE_QUE_MANEJA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VOLTAJE QUE MANEJA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_INICIO_FUNCIONAMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA INICIO FUNCIONAMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_ALIMENTACION_ELEC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE ALIMENTACION ELEC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_ALIMENTACION_ELEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE ALIMENTACION ELEC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VOLTAJE_QUE_MANEJA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VOLTAJE QUE MANEJA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VOLTAJE_QUE_MANEJA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VOLTAJE QUE MANEJA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_INICIO_FUNCIONAMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA INICIO FUNCIONAMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_INICIO_FUNCIONAMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA INICIO FUNCIONAMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOTA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.Mantenimiento.My.MySettings.Default.BASE_DE_DATOSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO, [NOMBRE DE LA MAQUINA], [TIPO DE ALIMENTACION ELEC], [VOLTAJE QUE "& _ 
                "MANEJA], [FECHA INICIO FUNCIONAMIENTO], NOTA FROM [CARACTERISTICAS TECNICAS DE L"& _ 
                "A MAQUINA]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BASE_DE_DATOSDataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BASE_DE_DATOSDataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BASE_DE_DATOSDataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable = New BASE_DE_DATOSDataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BASE_DE_DATOSDataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CARACTERISTICAS TECNICAS DE LA MAQUINA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_TIPO_DE_ALIMENTACION_ELEC As String, ByVal Original_VOLTAJE_QUE_MANEJA As String, ByVal Original_FECHA_INICIO_FUNCIONAMIENTO As Global.System.Nullable(Of Date), ByVal Original_NOTA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_TIPO_DE_ALIMENTACION_ELEC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TIPO_DE_ALIMENTACION_ELEC,String)
            End If
            If (Original_VOLTAJE_QUE_MANEJA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_VOLTAJE_QUE_MANEJA,String)
            End If
            If (Original_FECHA_INICIO_FUNCIONAMIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FECHA_INICIO_FUNCIONAMIENTO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_NOTA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NOTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal TIPO_DE_ALIMENTACION_ELEC As String, ByVal VOLTAJE_QUE_MANEJA As String, ByVal FECHA_INICIO_FUNCIONAMIENTO As Global.System.Nullable(Of Date), ByVal NOTA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO,Integer)
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (TIPO_DE_ALIMENTACION_ELEC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TIPO_DE_ALIMENTACION_ELEC,String)
            End If
            If (VOLTAJE_QUE_MANEJA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(VOLTAJE_QUE_MANEJA,String)
            End If
            If (FECHA_INICIO_FUNCIONAMIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_INICIO_FUNCIONAMIENTO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (NOTA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(NOTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal TIPO_DE_ALIMENTACION_ELEC As String, ByVal VOLTAJE_QUE_MANEJA As String, ByVal FECHA_INICIO_FUNCIONAMIENTO As Global.System.Nullable(Of Date), ByVal NOTA As String, ByVal Original_CODIGO As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_TIPO_DE_ALIMENTACION_ELEC As String, ByVal Original_VOLTAJE_QUE_MANEJA As String, ByVal Original_FECHA_INICIO_FUNCIONAMIENTO As Global.System.Nullable(Of Date), ByVal Original_NOTA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO,Integer)
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (TIPO_DE_ALIMENTACION_ELEC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TIPO_DE_ALIMENTACION_ELEC,String)
            End If
            If (VOLTAJE_QUE_MANEJA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(VOLTAJE_QUE_MANEJA,String)
            End If
            If (FECHA_INICIO_FUNCIONAMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_INICIO_FUNCIONAMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (NOTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(NOTA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CODIGO,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_TIPO_DE_ALIMENTACION_ELEC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TIPO_DE_ALIMENTACION_ELEC,String)
            End If
            If (Original_VOLTAJE_QUE_MANEJA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_VOLTAJE_QUE_MANEJA,String)
            End If
            If (Original_FECHA_INICIO_FUNCIONAMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FECHA_INICIO_FUNCIONAMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_NOTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_NOTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal TIPO_DE_ALIMENTACION_ELEC As String, ByVal VOLTAJE_QUE_MANEJA As String, ByVal FECHA_INICIO_FUNCIONAMIENTO As Global.System.Nullable(Of Date), ByVal NOTA As String, ByVal Original_CODIGO As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_TIPO_DE_ALIMENTACION_ELEC As String, ByVal Original_VOLTAJE_QUE_MANEJA As String, ByVal Original_FECHA_INICIO_FUNCIONAMIENTO As Global.System.Nullable(Of Date), ByVal Original_NOTA As String) As Integer
            Return Me.Update(Original_CODIGO, NOMBRE_DE_LA_MAQUINA, TIPO_DE_ALIMENTACION_ELEC, VOLTAJE_QUE_MANEJA, FECHA_INICIO_FUNCIONAMIENTO, NOTA, Original_CODIGO, Original_NOMBRE_DE_LA_MAQUINA, Original_TIPO_DE_ALIMENTACION_ELEC, Original_VOLTAJE_QUE_MANEJA, Original_FECHA_INICIO_FUNCIONAMIENTO, Original_NOTA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HOJA_DE_VIDA_DE_LA_MAQUINATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HOJA DE VIDA DE LA MAQUINA"
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("NOMBRE DE LA MAQUINA", "NOMBRE DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("REFERENCIA", "REFERENCIA")
            tableMapping.ColumnMappings.Add("MARCA", "MARCA")
            tableMapping.ColumnMappings.Add("TIPO DE MAQUINA", "TIPO DE MAQUINA")
            tableMapping.ColumnMappings.Add("FECHA DE INGRESO A LA EMPRESA", "FECHA DE INGRESO A LA EMPRESA")
            tableMapping.ColumnMappings.Add("INGRESO AL SISTEMA FECHA", "INGRESO AL SISTEMA FECHA")
            tableMapping.ColumnMappings.Add("COSTO DE LA MAQUINA", "COSTO DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("NOTA", "NOTA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `HOJA DE VIDA DE LA MAQUINA` WHERE ((`CODIGO` = ?) AND ((? = 1 AND `N"& _ 
                "OMBRE DE LA MAQUINA` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND ((? = 1 AND `"& _ 
                "REFERENCIA` IS NULL) OR (`REFERENCIA` = ?)) AND ((? = 1 AND `MARCA` IS NULL) OR "& _ 
                "(`MARCA` = ?)) AND ((? = 1 AND `TIPO DE MAQUINA` IS NULL) OR (`TIPO DE MAQUINA` "& _ 
                "= ?)) AND ((? = 1 AND `FECHA DE INGRESO A LA EMPRESA` IS NULL) OR (`FECHA DE ING"& _ 
                "RESO A LA EMPRESA` = ?)) AND ((? = 1 AND `INGRESO AL SISTEMA FECHA` IS NULL) OR "& _ 
                "(`INGRESO AL SISTEMA FECHA` = ?)) AND ((? = 1 AND `COSTO DE LA MAQUINA` IS NULL)"& _ 
                " OR (`COSTO DE LA MAQUINA` = ?)) AND ((? = 1 AND `NOTA` IS NULL) OR (`NOTA` = ?)"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REFERENCIA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REFERENCIA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MARCA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MARCA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MARCA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MARCA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DE_INGRESO_A_LA_EMPRESA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE INGRESO A LA EMPRESA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_INGRESO_A_LA_EMPRESA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE INGRESO A LA EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INGRESO_AL_SISTEMA_FECHA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INGRESO AL SISTEMA FECHA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INGRESO_AL_SISTEMA_FECHA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INGRESO AL SISTEMA FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COSTO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COSTO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COSTO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COSTO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOTA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `HOJA DE VIDA DE LA MAQUINA` (`CODIGO`, `NOMBRE DE LA MAQUINA`, `REFE"& _ 
                "RENCIA`, `MARCA`, `TIPO DE MAQUINA`, `FECHA DE INGRESO A LA EMPRESA`, `INGRESO A"& _ 
                "L SISTEMA FECHA`, `COSTO DE LA MAQUINA`, `NOTA`) VALUES (?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REFERENCIA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MARCA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_INGRESO_A_LA_EMPRESA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE INGRESO A LA EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INGRESO_AL_SISTEMA_FECHA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INGRESO AL SISTEMA FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COSTO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COSTO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `HOJA DE VIDA DE LA MAQUINA` SET `CODIGO` = ?, `NOMBRE DE LA MAQUINA` = ?,"& _ 
                " `REFERENCIA` = ?, `MARCA` = ?, `TIPO DE MAQUINA` = ?, `FECHA DE INGRESO A LA EM"& _ 
                "PRESA` = ?, `INGRESO AL SISTEMA FECHA` = ?, `COSTO DE LA MAQUINA` = ?, `NOTA` = "& _ 
                "? WHERE ((`CODIGO` = ?) AND ((? = 1 AND `NOMBRE DE LA MAQUINA` IS NULL) OR (`NOM"& _ 
                "BRE DE LA MAQUINA` = ?)) AND ((? = 1 AND `REFERENCIA` IS NULL) OR (`REFERENCIA` "& _ 
                "= ?)) AND ((? = 1 AND `MARCA` IS NULL) OR (`MARCA` = ?)) AND ((? = 1 AND `TIPO D"& _ 
                "E MAQUINA` IS NULL) OR (`TIPO DE MAQUINA` = ?)) AND ((? = 1 AND `FECHA DE INGRES"& _ 
                "O A LA EMPRESA` IS NULL) OR (`FECHA DE INGRESO A LA EMPRESA` = ?)) AND ((? = 1 A"& _ 
                "ND `INGRESO AL SISTEMA FECHA` IS NULL) OR (`INGRESO AL SISTEMA FECHA` = ?)) AND "& _ 
                "((? = 1 AND `COSTO DE LA MAQUINA` IS NULL) OR (`COSTO DE LA MAQUINA` = ?)) AND ("& _ 
                "(? = 1 AND `NOTA` IS NULL) OR (`NOTA` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REFERENCIA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MARCA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MARCA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_INGRESO_A_LA_EMPRESA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE INGRESO A LA EMPRESA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INGRESO_AL_SISTEMA_FECHA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INGRESO AL SISTEMA FECHA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COSTO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COSTO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REFERENCIA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REFERENCIA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MARCA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MARCA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MARCA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MARCA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DE_INGRESO_A_LA_EMPRESA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE INGRESO A LA EMPRESA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_INGRESO_A_LA_EMPRESA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE INGRESO A LA EMPRESA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INGRESO_AL_SISTEMA_FECHA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INGRESO AL SISTEMA FECHA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INGRESO_AL_SISTEMA_FECHA", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INGRESO AL SISTEMA FECHA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COSTO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COSTO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COSTO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COSTO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOTA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOTA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOTA", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.Mantenimiento.My.MySettings.Default.BASE_DE_DATOSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO, [NOMBRE DE LA MAQUINA], REFERENCIA, MARCA, [TIPO DE MAQUINA], [FEC"& _ 
                "HA DE INGRESO A LA EMPRESA], [INGRESO AL SISTEMA FECHA], [COSTO DE LA MAQUINA], "& _ 
                "NOTA FROM [HOJA DE VIDA DE LA MAQUINA]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BASE_DE_DATOSDataSet.HOJA_DE_VIDA_DE_LA_MAQUINADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BASE_DE_DATOSDataSet.HOJA_DE_VIDA_DE_LA_MAQUINADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BASE_DE_DATOSDataSet.HOJA_DE_VIDA_DE_LA_MAQUINADataTable = New BASE_DE_DATOSDataSet.HOJA_DE_VIDA_DE_LA_MAQUINADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BASE_DE_DATOSDataSet.HOJA_DE_VIDA_DE_LA_MAQUINADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "HOJA DE VIDA DE LA MAQUINA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_REFERENCIA As String, ByVal Original_MARCA As String, ByVal Original_TIPO_DE_MAQUINA As String, ByVal Original_FECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Nullable(Of Date), ByVal Original_INGRESO_AL_SISTEMA_FECHA As Global.System.Nullable(Of Date), ByVal Original_COSTO_DE_LA_MAQUINA As Global.System.Nullable(Of Decimal), ByVal Original_NOTA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_REFERENCIA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_REFERENCIA,String)
            End If
            If (Original_MARCA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MARCA,String)
            End If
            If (Original_TIPO_DE_MAQUINA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TIPO_DE_MAQUINA,String)
            End If
            If (Original_FECHA_DE_INGRESO_A_LA_EMPRESA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FECHA_DE_INGRESO_A_LA_EMPRESA.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_INGRESO_AL_SISTEMA_FECHA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_INGRESO_AL_SISTEMA_FECHA.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_COSTO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_COSTO_DE_LA_MAQUINA.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_NOTA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_NOTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal REFERENCIA As String, ByVal MARCA As String, ByVal TIPO_DE_MAQUINA As String, ByVal FECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Nullable(Of Date), ByVal INGRESO_AL_SISTEMA_FECHA As Global.System.Nullable(Of Date), ByVal COSTO_DE_LA_MAQUINA As Global.System.Nullable(Of Decimal), ByVal NOTA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO,Integer)
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (REFERENCIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(REFERENCIA,String)
            End If
            If (MARCA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MARCA,String)
            End If
            If (TIPO_DE_MAQUINA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TIPO_DE_MAQUINA,String)
            End If
            If (FECHA_DE_INGRESO_A_LA_EMPRESA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_DE_INGRESO_A_LA_EMPRESA.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (INGRESO_AL_SISTEMA_FECHA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(INGRESO_AL_SISTEMA_FECHA.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (COSTO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COSTO_DE_LA_MAQUINA.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (NOTA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(NOTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO As Integer,  _
                    ByVal NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal REFERENCIA As String,  _
                    ByVal MARCA As String,  _
                    ByVal TIPO_DE_MAQUINA As String,  _
                    ByVal FECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Nullable(Of Date),  _
                    ByVal INGRESO_AL_SISTEMA_FECHA As Global.System.Nullable(Of Date),  _
                    ByVal COSTO_DE_LA_MAQUINA As Global.System.Nullable(Of Decimal),  _
                    ByVal NOTA As String,  _
                    ByVal Original_CODIGO As Integer,  _
                    ByVal Original_NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal Original_REFERENCIA As String,  _
                    ByVal Original_MARCA As String,  _
                    ByVal Original_TIPO_DE_MAQUINA As String,  _
                    ByVal Original_FECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Nullable(Of Date),  _
                    ByVal Original_INGRESO_AL_SISTEMA_FECHA As Global.System.Nullable(Of Date),  _
                    ByVal Original_COSTO_DE_LA_MAQUINA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NOTA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO,Integer)
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (REFERENCIA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REFERENCIA,String)
            End If
            If (MARCA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MARCA,String)
            End If
            If (TIPO_DE_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TIPO_DE_MAQUINA,String)
            End If
            If (FECHA_DE_INGRESO_A_LA_EMPRESA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FECHA_DE_INGRESO_A_LA_EMPRESA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (INGRESO_AL_SISTEMA_FECHA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(INGRESO_AL_SISTEMA_FECHA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (COSTO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COSTO_DE_LA_MAQUINA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (NOTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(NOTA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CODIGO,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_REFERENCIA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_REFERENCIA,String)
            End If
            If (Original_MARCA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MARCA,String)
            End If
            If (Original_TIPO_DE_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_TIPO_DE_MAQUINA,String)
            End If
            If (Original_FECHA_DE_INGRESO_A_LA_EMPRESA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FECHA_DE_INGRESO_A_LA_EMPRESA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_INGRESO_AL_SISTEMA_FECHA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_INGRESO_AL_SISTEMA_FECHA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_COSTO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_COSTO_DE_LA_MAQUINA.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_NOTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_NOTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal REFERENCIA As String,  _
                    ByVal MARCA As String,  _
                    ByVal TIPO_DE_MAQUINA As String,  _
                    ByVal FECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Nullable(Of Date),  _
                    ByVal INGRESO_AL_SISTEMA_FECHA As Global.System.Nullable(Of Date),  _
                    ByVal COSTO_DE_LA_MAQUINA As Global.System.Nullable(Of Decimal),  _
                    ByVal NOTA As String,  _
                    ByVal Original_CODIGO As Integer,  _
                    ByVal Original_NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal Original_REFERENCIA As String,  _
                    ByVal Original_MARCA As String,  _
                    ByVal Original_TIPO_DE_MAQUINA As String,  _
                    ByVal Original_FECHA_DE_INGRESO_A_LA_EMPRESA As Global.System.Nullable(Of Date),  _
                    ByVal Original_INGRESO_AL_SISTEMA_FECHA As Global.System.Nullable(Of Date),  _
                    ByVal Original_COSTO_DE_LA_MAQUINA As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_NOTA As String) As Integer
            Return Me.Update(Original_CODIGO, NOMBRE_DE_LA_MAQUINA, REFERENCIA, MARCA, TIPO_DE_MAQUINA, FECHA_DE_INGRESO_A_LA_EMPRESA, INGRESO_AL_SISTEMA_FECHA, COSTO_DE_LA_MAQUINA, NOTA, Original_CODIGO, Original_NOMBRE_DE_LA_MAQUINA, Original_REFERENCIA, Original_MARCA, Original_TIPO_DE_MAQUINA, Original_FECHA_DE_INGRESO_A_LA_EMPRESA, Original_INGRESO_AL_SISTEMA_FECHA, Original_COSTO_DE_LA_MAQUINA, Original_NOTA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ORDEN_DE_TRABAJOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ORDEN DE TRABAJO"
            tableMapping.ColumnMappings.Add("CODIGO DE LA MAQUINA", "CODIGO DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("NOMBRE DE LA MAQUINA", "NOMBRE DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("TIPO DE MANTENIMIENTO", "TIPO DE MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("N° ORDEN DE TRABAJO", "N° ORDEN DE TRABAJO")
            tableMapping.ColumnMappings.Add("FECHA DE LA ORDEN DE MANTENIMIENTO", "FECHA DE LA ORDEN DE MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("FECHA DEL MANTENIMIENTO", "FECHA DEL MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("TRABAJO A REALIZAR", "TRABAJO A REALIZAR")
            tableMapping.ColumnMappings.Add("MOTIVO", "MOTIVO")
            tableMapping.ColumnMappings.Add("ORDENA", "ORDENA")
            tableMapping.ColumnMappings.Add("COLABORADOR", "COLABORADOR")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ORDEN DE TRABAJO` WHERE (((? = 1 AND `CODIGO DE LA MAQUINA` IS NULL)"& _ 
                " OR (`CODIGO DE LA MAQUINA` = ?)) AND ((? = 1 AND `NOMBRE DE LA MAQUINA` IS NULL"& _ 
                ") OR (`NOMBRE DE LA MAQUINA` = ?)) AND ((? = 1 AND `TIPO DE MANTENIMIENTO` IS NU"& _ 
                "LL) OR (`TIPO DE MANTENIMIENTO` = ?)) AND (`N° ORDEN DE TRABAJO` = ?) AND ((? = "& _ 
                "1 AND `FECHA DE LA ORDEN DE MANTENIMIENTO` IS NULL) OR (`FECHA DE LA ORDEN DE MA"& _ 
                "NTENIMIENTO` = ?)) AND ((? = 1 AND `FECHA DEL MANTENIMIENTO` IS NULL) OR (`FECHA"& _ 
                " DEL MANTENIMIENTO` = ?)) AND ((? = 1 AND `ORDENA` IS NULL) OR (`ORDENA` = ?)) A"& _ 
                "ND ((? = 1 AND `COLABORADOR` IS NULL) OR (`COLABORADOR` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_N°_ORDEN_DE_TRABAJO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° ORDEN DE TRABAJO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE LA ORDEN DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE LA ORDEN DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DEL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DEL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DEL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DEL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDENA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDENA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDENA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDENA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COLABORADOR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COLABORADOR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COLABORADOR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COLABORADOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ORDEN DE TRABAJO` (`CODIGO DE LA MAQUINA`, `NOMBRE DE LA MAQUINA`, `"& _ 
                "TIPO DE MANTENIMIENTO`, `N° ORDEN DE TRABAJO`, `FECHA DE LA ORDEN DE MANTENIMIEN"& _ 
                "TO`, `FECHA DEL MANTENIMIENTO`, `TRABAJO A REALIZAR`, `MOTIVO`, `ORDENA`, `COLAB"& _ 
                "ORADOR`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("N°_ORDEN_DE_TRABAJO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° ORDEN DE TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE LA ORDEN DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DEL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DEL MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TRABAJO_A_REALIZAR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO A REALIZAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MOTIVO", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDENA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDENA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COLABORADOR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COLABORADOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ORDEN DE TRABAJO` SET `CODIGO DE LA MAQUINA` = ?, `NOMBRE DE LA MAQUINA` "& _ 
                "= ?, `TIPO DE MANTENIMIENTO` = ?, `N° ORDEN DE TRABAJO` = ?, `FECHA DE LA ORDEN "& _ 
                "DE MANTENIMIENTO` = ?, `FECHA DEL MANTENIMIENTO` = ?, `TRABAJO A REALIZAR` = ?, "& _ 
                "`MOTIVO` = ?, `ORDENA` = ?, `COLABORADOR` = ? WHERE (((? = 1 AND `CODIGO DE LA M"& _ 
                "AQUINA` IS NULL) OR (`CODIGO DE LA MAQUINA` = ?)) AND ((? = 1 AND `NOMBRE DE LA "& _ 
                "MAQUINA` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND ((? = 1 AND `TIPO DE MANT"& _ 
                "ENIMIENTO` IS NULL) OR (`TIPO DE MANTENIMIENTO` = ?)) AND (`N° ORDEN DE TRABAJO`"& _ 
                " = ?) AND ((? = 1 AND `FECHA DE LA ORDEN DE MANTENIMIENTO` IS NULL) OR (`FECHA D"& _ 
                "E LA ORDEN DE MANTENIMIENTO` = ?)) AND ((? = 1 AND `FECHA DEL MANTENIMIENTO` IS "& _ 
                "NULL) OR (`FECHA DEL MANTENIMIENTO` = ?)) AND ((? = 1 AND `ORDENA` IS NULL) OR ("& _ 
                "`ORDENA` = ?)) AND ((? = 1 AND `COLABORADOR` IS NULL) OR (`COLABORADOR` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("N°_ORDEN_DE_TRABAJO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° ORDEN DE TRABAJO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE LA ORDEN DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DEL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DEL MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TRABAJO_A_REALIZAR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO A REALIZAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MOTIVO", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDENA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDENA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COLABORADOR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COLABORADOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_N°_ORDEN_DE_TRABAJO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° ORDEN DE TRABAJO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE LA ORDEN DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE LA ORDEN DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DEL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DEL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DEL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DEL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDENA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDENA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDENA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDENA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COLABORADOR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COLABORADOR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COLABORADOR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COLABORADOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.Mantenimiento.My.MySettings.Default.BASE_DE_DATOSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CODIGO DE LA MAQUINA], [NOMBRE DE LA MAQUINA], [TIPO DE MANTENIMIENTO], ["& _ 
                "N° ORDEN DE TRABAJO], [FECHA DE LA ORDEN DE MANTENIMIENTO], [FECHA DEL MANTENIMI"& _ 
                "ENTO], [TRABAJO A REALIZAR], MOTIVO, ORDENA, COLABORADOR FROM [ORDEN DE TRABAJO]"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BASE_DE_DATOSDataSet.ORDEN_DE_TRABAJODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BASE_DE_DATOSDataSet.ORDEN_DE_TRABAJODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BASE_DE_DATOSDataSet.ORDEN_DE_TRABAJODataTable = New BASE_DE_DATOSDataSet.ORDEN_DE_TRABAJODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BASE_DE_DATOSDataSet.ORDEN_DE_TRABAJODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ORDEN DE TRABAJO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_DE_LA_MAQUINA As Global.System.Nullable(Of Integer), ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_TIPO_DE_MANTENIMIENTO As String, ByVal _Original_N__ORDEN_DE_TRABAJO As String, ByVal Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Nullable(Of Date), ByVal Original_FECHA_DEL_MANTENIMIENTO As Global.System.Nullable(Of Date), ByVal Original_ORDENA As String, ByVal Original_COLABORADOR As String) As Integer
            If (Original_CODIGO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TIPO_DE_MANTENIMIENTO,String)
            End If
            If (_Original_N__ORDEN_DE_TRABAJO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Original_N__ORDEN_DE_TRABAJO")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(_Original_N__ORDEN_DE_TRABAJO,String)
            End If
            If (Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_FECHA_DEL_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FECHA_DEL_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDENA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ORDENA,String)
            End If
            If (Original_COLABORADOR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_COLABORADOR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_DE_LA_MAQUINA As Global.System.Nullable(Of Integer), ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal TIPO_DE_MANTENIMIENTO As String, ByVal _N__ORDEN_DE_TRABAJO As String, ByVal FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Nullable(Of Date), ByVal FECHA_DEL_MANTENIMIENTO As Global.System.Nullable(Of Date), ByVal TRABAJO_A_REALIZAR As String, ByVal MOTIVO As String, ByVal ORDENA As String, ByVal COLABORADOR As String) As Integer
            If (CODIGO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TIPO_DE_MANTENIMIENTO,String)
            End If
            If (_N__ORDEN_DE_TRABAJO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_N__ORDEN_DE_TRABAJO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_N__ORDEN_DE_TRABAJO,String)
            End If
            If (FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FECHA_DEL_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_DEL_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRABAJO_A_REALIZAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRABAJO_A_REALIZAR,String)
            End If
            If (MOTIVO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MOTIVO,String)
            End If
            If (ORDENA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ORDENA,String)
            End If
            If (COLABORADOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(COLABORADOR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal _N__ORDEN_DE_TRABAJO As String,  _
                    ByVal FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal FECHA_DEL_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal TRABAJO_A_REALIZAR As String,  _
                    ByVal MOTIVO As String,  _
                    ByVal ORDENA As String,  _
                    ByVal COLABORADOR As String,  _
                    ByVal Original_CODIGO_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal Original_TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal _Original_N__ORDEN_DE_TRABAJO As String,  _
                    ByVal Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_FECHA_DEL_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_ORDENA As String,  _
                    ByVal Original_COLABORADOR As String) As Integer
            If (CODIGO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TIPO_DE_MANTENIMIENTO,String)
            End If
            If (_N__ORDEN_DE_TRABAJO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_N__ORDEN_DE_TRABAJO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_N__ORDEN_DE_TRABAJO,String)
            End If
            If (FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FECHA_DEL_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FECHA_DEL_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRABAJO_A_REALIZAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRABAJO_A_REALIZAR,String)
            End If
            If (MOTIVO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MOTIVO,String)
            End If
            If (ORDENA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ORDENA,String)
            End If
            If (COLABORADOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(COLABORADOR,String)
            End If
            If (Original_CODIGO_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CODIGO_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_TIPO_DE_MANTENIMIENTO,String)
            End If
            If (_Original_N__ORDEN_DE_TRABAJO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Original_N__ORDEN_DE_TRABAJO")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(_Original_N__ORDEN_DE_TRABAJO,String)
            End If
            If (Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_FECHA_DEL_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_FECHA_DEL_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDENA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ORDENA,String)
            End If
            If (Original_COLABORADOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_COLABORADOR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal FECHA_DEL_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal TRABAJO_A_REALIZAR As String,  _
                    ByVal MOTIVO As String,  _
                    ByVal ORDENA As String,  _
                    ByVal COLABORADOR As String,  _
                    ByVal Original_CODIGO_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOMBRE_DE_LA_MAQUINA As String,  _
                    ByVal Original_TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal _Original_N__ORDEN_DE_TRABAJO As String,  _
                    ByVal Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_FECHA_DEL_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_ORDENA As String,  _
                    ByVal Original_COLABORADOR As String) As Integer
            Return Me.Update(CODIGO_DE_LA_MAQUINA, NOMBRE_DE_LA_MAQUINA, TIPO_DE_MANTENIMIENTO, _Original_N__ORDEN_DE_TRABAJO, FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO, FECHA_DEL_MANTENIMIENTO, TRABAJO_A_REALIZAR, MOTIVO, ORDENA, COLABORADOR, Original_CODIGO_DE_LA_MAQUINA, Original_NOMBRE_DE_LA_MAQUINA, Original_TIPO_DE_MANTENIMIENTO, _Original_N__ORDEN_DE_TRABAJO, Original_FECHA_DE_LA_ORDEN_DE_MANTENIMIENTO, Original_FECHA_DEL_MANTENIMIENTO, Original_ORDENA, Original_COLABORADOR)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REGISTRO_DE_MANTENIMIENTOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REGISTRO DE MANTENIMIENTO"
            tableMapping.ColumnMappings.Add("CODIGO DE LA MAQUINA", "CODIGO DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("NOMBRE DE LA MAQUINA", "NOMBRE DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("N° DE ORDEN", "N° DE ORDEN")
            tableMapping.ColumnMappings.Add("FECHA DE MANTENIMIENTO", "FECHA DE MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("TRABAJO REALIZADO", "TRABAJO REALIZADO")
            tableMapping.ColumnMappings.Add("PERSONA QUE REALIZA EL MANTENIMIENTO", "PERSONA QUE REALIZA EL MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("TIPO DE MANTENIMIENTO", "TIPO DE MANTENIMIENTO")
            tableMapping.ColumnMappings.Add("TIEMPO DE REPARACION EN HORAS", "TIEMPO DE REPARACION EN HORAS")
            tableMapping.ColumnMappings.Add("TIEMPO", "TIEMPO")
            tableMapping.ColumnMappings.Add("CODAP", "CODAP")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `REGISTRO DE MANTENIMIENTO` WHERE (((? = 1 AND `CODIGO DE LA MAQUINA`"& _ 
                " IS NULL) OR (`CODIGO DE LA MAQUINA` = ?)) AND ((? = 1 AND `NOMBRE DE LA MAQUINA"& _ 
                "` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND (`N° DE ORDEN` = ?) AND ((? = 1 "& _ 
                "AND `FECHA DE MANTENIMIENTO` IS NULL) OR (`FECHA DE MANTENIMIENTO` = ?)) AND ((?"& _ 
                " = 1 AND `TRABAJO REALIZADO` IS NULL) OR (`TRABAJO REALIZADO` = ?)) AND ((? = 1 "& _ 
                "AND `PERSONA QUE REALIZA EL MANTENIMIENTO` IS NULL) OR (`PERSONA QUE REALIZA EL "& _ 
                "MANTENIMIENTO` = ?)) AND ((? = 1 AND `TIPO DE MANTENIMIENTO` IS NULL) OR (`TIPO "& _ 
                "DE MANTENIMIENTO` = ?)) AND ((? = 1 AND `TIEMPO DE REPARACION EN HORAS` IS NULL)"& _ 
                " OR (`TIEMPO DE REPARACION EN HORAS` = ?)) AND ((? = 1 AND `TIEMPO` IS NULL) OR "& _ 
                "(`TIEMPO` = ?)) AND ((? = 1 AND `CODAP` IS NULL) OR (`CODAP` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_N°_DE_ORDEN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° DE ORDEN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TRABAJO_REALIZADO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO REALIZADO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TRABAJO_REALIZADO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO REALIZADO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PERSONA QUE REALIZA EL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PERSONA QUE REALIZA EL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIEMPO_DE_REPARACION_EN_HORAS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO DE REPARACION EN HORAS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIEMPO_DE_REPARACION_EN_HORAS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO DE REPARACION EN HORAS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIEMPO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIEMPO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODAP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODAP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODAP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODAP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `REGISTRO DE MANTENIMIENTO` (`CODIGO DE LA MAQUINA`, `NOMBRE DE LA MA"& _ 
                "QUINA`, `N° DE ORDEN`, `FECHA DE MANTENIMIENTO`, `TRABAJO REALIZADO`, `PERSONA Q"& _ 
                "UE REALIZA EL MANTENIMIENTO`, `TIPO DE MANTENIMIENTO`, `TIEMPO DE REPARACION EN "& _ 
                "HORAS`, `TIEMPO`, `CODAP`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("N°_DE_ORDEN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° DE ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TRABAJO_REALIZADO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO REALIZADO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PERSONA_QUE_REALIZA_EL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PERSONA QUE REALIZA EL MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIEMPO_DE_REPARACION_EN_HORAS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO DE REPARACION EN HORAS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIEMPO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODAP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODAP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `REGISTRO DE MANTENIMIENTO` SET `CODIGO DE LA MAQUINA` = ?, `NOMBRE DE LA "& _ 
                "MAQUINA` = ?, `N° DE ORDEN` = ?, `FECHA DE MANTENIMIENTO` = ?, `TRABAJO REALIZAD"& _ 
                "O` = ?, `PERSONA QUE REALIZA EL MANTENIMIENTO` = ?, `TIPO DE MANTENIMIENTO` = ?,"& _ 
                " `TIEMPO DE REPARACION EN HORAS` = ?, `TIEMPO` = ?, `CODAP` = ? WHERE (((? = 1 A"& _ 
                "ND `CODIGO DE LA MAQUINA` IS NULL) OR (`CODIGO DE LA MAQUINA` = ?)) AND ((? = 1 "& _ 
                "AND `NOMBRE DE LA MAQUINA` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND (`N° DE"& _ 
                " ORDEN` = ?) AND ((? = 1 AND `FECHA DE MANTENIMIENTO` IS NULL) OR (`FECHA DE MAN"& _ 
                "TENIMIENTO` = ?)) AND ((? = 1 AND `TRABAJO REALIZADO` IS NULL) OR (`TRABAJO REAL"& _ 
                "IZADO` = ?)) AND ((? = 1 AND `PERSONA QUE REALIZA EL MANTENIMIENTO` IS NULL) OR "& _ 
                "(`PERSONA QUE REALIZA EL MANTENIMIENTO` = ?)) AND ((? = 1 AND `TIPO DE MANTENIMI"& _ 
                "ENTO` IS NULL) OR (`TIPO DE MANTENIMIENTO` = ?)) AND ((? = 1 AND `TIEMPO DE REPA"& _ 
                "RACION EN HORAS` IS NULL) OR (`TIEMPO DE REPARACION EN HORAS` = ?)) AND ((? = 1 "& _ 
                "AND `TIEMPO` IS NULL) OR (`TIEMPO` = ?)) AND ((? = 1 AND `CODAP` IS NULL) OR (`C"& _ 
                "ODAP` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("N°_DE_ORDEN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° DE ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TRABAJO_REALIZADO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO REALIZADO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PERSONA_QUE_REALIZA_EL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PERSONA QUE REALIZA EL MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIEMPO_DE_REPARACION_EN_HORAS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO DE REPARACION EN HORAS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIEMPO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODAP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODAP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_N°_DE_ORDEN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "N° DE ORDEN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FECHA_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TRABAJO_REALIZADO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO REALIZADO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TRABAJO_REALIZADO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TRABAJO REALIZADO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PERSONA QUE REALIZA EL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PERSONA QUE REALIZA EL MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIPO_DE_MANTENIMIENTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIPO DE MANTENIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIEMPO_DE_REPARACION_EN_HORAS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO DE REPARACION EN HORAS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIEMPO_DE_REPARACION_EN_HORAS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO DE REPARACION EN HORAS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIEMPO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIEMPO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIEMPO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODAP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODAP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODAP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODAP", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.Mantenimiento.My.MySettings.Default.BASE_DE_DATOSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CODIGO DE LA MAQUINA], [NOMBRE DE LA MAQUINA], [N° DE ORDEN], [FECHA DE M"& _ 
                "ANTENIMIENTO], [TRABAJO REALIZADO], [PERSONA QUE REALIZA EL MANTENIMIENTO], [TIP"& _ 
                "O DE MANTENIMIENTO], [TIEMPO DE REPARACION EN HORAS], TIEMPO, CODAP FROM [REGIST"& _ 
                "RO DE MANTENIMIENTO]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BASE_DE_DATOSDataSet.REGISTRO_DE_MANTENIMIENTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BASE_DE_DATOSDataSet.REGISTRO_DE_MANTENIMIENTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BASE_DE_DATOSDataSet.REGISTRO_DE_MANTENIMIENTODataTable = New BASE_DE_DATOSDataSet.REGISTRO_DE_MANTENIMIENTODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BASE_DE_DATOSDataSet.REGISTRO_DE_MANTENIMIENTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "REGISTRO DE MANTENIMIENTO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_DE_LA_MAQUINA As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As Global.System.Nullable(Of Integer), ByVal _Original_N__DE_ORDEN As String, ByVal Original_FECHA_DE_MANTENIMIENTO As Global.System.Nullable(Of Date), ByVal Original_TRABAJO_REALIZADO As String, ByVal Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String, ByVal Original_TIPO_DE_MANTENIMIENTO As String, ByVal Original_TIEMPO_DE_REPARACION_EN_HORAS As Global.System.Nullable(Of Short), ByVal Original_TIEMPO As Global.System.Nullable(Of Integer), ByVal Original_CODAP As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_DE_LA_MAQUINA,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NOMBRE_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_Original_N__DE_ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Original_N__DE_ORDEN")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(_Original_N__DE_ORDEN,String)
            End If
            If (Original_FECHA_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FECHA_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_TRABAJO_REALIZADO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TRABAJO_REALIZADO,String)
            End If
            If (Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO,String)
            End If
            If (Original_TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TIPO_DE_MANTENIMIENTO,String)
            End If
            If (Original_TIEMPO_DE_REPARACION_EN_HORAS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_TIEMPO_DE_REPARACION_EN_HORAS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TIEMPO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TIEMPO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CODAP,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As Global.System.Nullable(Of Integer), ByVal _N__DE_ORDEN As String, ByVal FECHA_DE_MANTENIMIENTO As Global.System.Nullable(Of Date), ByVal TRABAJO_REALIZADO As String, ByVal PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String, ByVal TIPO_DE_MANTENIMIENTO As String, ByVal TIEMPO_DE_REPARACION_EN_HORAS As Global.System.Nullable(Of Short), ByVal TIEMPO As Global.System.Nullable(Of Integer), ByVal CODAP As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_DE_LA_MAQUINA,Integer)
            If (NOMBRE_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (_N__DE_ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_N__DE_ORDEN")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_N__DE_ORDEN,String)
            End If
            If (FECHA_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRABAJO_REALIZADO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRABAJO_REALIZADO,String)
            End If
            If (PERSONA_QUE_REALIZA_EL_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PERSONA_QUE_REALIZA_EL_MANTENIMIENTO,String)
            End If
            If (TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TIPO_DE_MANTENIMIENTO,String)
            End If
            If (TIEMPO_DE_REPARACION_EN_HORAS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TIEMPO_DE_REPARACION_EN_HORAS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TIEMPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TIEMPO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(CODAP,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_DE_LA_MAQUINA As Integer,  _
                    ByVal NOMBRE_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal _N__DE_ORDEN As String,  _
                    ByVal FECHA_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal TRABAJO_REALIZADO As String,  _
                    ByVal PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String,  _
                    ByVal TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal TIEMPO_DE_REPARACION_EN_HORAS As Global.System.Nullable(Of Short),  _
                    ByVal TIEMPO As Global.System.Nullable(Of Integer),  _
                    ByVal CODAP As Integer,  _
                    ByVal Original_CODIGO_DE_LA_MAQUINA As Integer,  _
                    ByVal Original_NOMBRE_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_N__DE_ORDEN As String,  _
                    ByVal Original_FECHA_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRABAJO_REALIZADO As String,  _
                    ByVal Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String,  _
                    ByVal Original_TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal Original_TIEMPO_DE_REPARACION_EN_HORAS As Global.System.Nullable(Of Short),  _
                    ByVal Original_TIEMPO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CODAP As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_DE_LA_MAQUINA,Integer)
            If (NOMBRE_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (_N__DE_ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_N__DE_ORDEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(_N__DE_ORDEN,String)
            End If
            If (FECHA_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRABAJO_REALIZADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRABAJO_REALIZADO,String)
            End If
            If (PERSONA_QUE_REALIZA_EL_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PERSONA_QUE_REALIZA_EL_MANTENIMIENTO,String)
            End If
            If (TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TIPO_DE_MANTENIMIENTO,String)
            End If
            If (TIEMPO_DE_REPARACION_EN_HORAS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TIEMPO_DE_REPARACION_EN_HORAS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TIEMPO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TIEMPO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CODAP,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CODIGO_DE_LA_MAQUINA,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_NOMBRE_DE_LA_MAQUINA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_Original_N__DE_ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Original_N__DE_ORDEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(_Original_N__DE_ORDEN,String)
            End If
            If (Original_FECHA_DE_MANTENIMIENTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_FECHA_DE_MANTENIMIENTO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_TRABAJO_REALIZADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TRABAJO_REALIZADO,String)
            End If
            If (Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO,String)
            End If
            If (Original_TIPO_DE_MANTENIMIENTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TIPO_DE_MANTENIMIENTO,String)
            End If
            If (Original_TIEMPO_DE_REPARACION_EN_HORAS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_TIEMPO_DE_REPARACION_EN_HORAS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_TIEMPO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_TIEMPO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_CODAP,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_DE_LA_MAQUINA As Integer,  _
                    ByVal NOMBRE_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal FECHA_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal TRABAJO_REALIZADO As String,  _
                    ByVal PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String,  _
                    ByVal TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal TIEMPO_DE_REPARACION_EN_HORAS As Global.System.Nullable(Of Short),  _
                    ByVal TIEMPO As Global.System.Nullable(Of Integer),  _
                    ByVal CODAP As Integer,  _
                    ByVal Original_CODIGO_DE_LA_MAQUINA As Integer,  _
                    ByVal Original_NOMBRE_DE_LA_MAQUINA As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_N__DE_ORDEN As String,  _
                    ByVal Original_FECHA_DE_MANTENIMIENTO As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRABAJO_REALIZADO As String,  _
                    ByVal Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO As String,  _
                    ByVal Original_TIPO_DE_MANTENIMIENTO As String,  _
                    ByVal Original_TIEMPO_DE_REPARACION_EN_HORAS As Global.System.Nullable(Of Short),  _
                    ByVal Original_TIEMPO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CODAP As Integer) As Integer
            Return Me.Update(CODIGO_DE_LA_MAQUINA, NOMBRE_DE_LA_MAQUINA, _Original_N__DE_ORDEN, FECHA_DE_MANTENIMIENTO, TRABAJO_REALIZADO, PERSONA_QUE_REALIZA_EL_MANTENIMIENTO, TIPO_DE_MANTENIMIENTO, TIEMPO_DE_REPARACION_EN_HORAS, TIEMPO, CODAP, Original_CODIGO_DE_LA_MAQUINA, Original_NOMBRE_DE_LA_MAQUINA, _Original_N__DE_ORDEN, Original_FECHA_DE_MANTENIMIENTO, Original_TRABAJO_REALIZADO, Original_PERSONA_QUE_REALIZA_EL_MANTENIMIENTO, Original_TIPO_DE_MANTENIMIENTO, Original_TIEMPO_DE_REPARACION_EN_HORAS, Original_TIEMPO, Original_CODAP)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPUESTOS_DISPONIBLESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPUESTOS DISPONIBLES"
            tableMapping.ColumnMappings.Add("REFERENCIA DE REPUESTO", "REFERENCIA DE REPUESTO")
            tableMapping.ColumnMappings.Add("NOMBRE DEL REPUESTO", "NOMBRE DEL REPUESTO")
            tableMapping.ColumnMappings.Add("CANTIDAD DISPONIBLE", "CANTIDAD DISPONIBLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `REPUESTOS DISPONIBLES` WHERE ((`REFERENCIA DE REPUESTO` = ?) AND ((?"& _ 
                " = 1 AND `NOMBRE DEL REPUESTO` IS NULL) OR (`NOMBRE DEL REPUESTO` = ?)) AND ((? "& _ 
                "= 1 AND `CANTIDAD DISPONIBLE` IS NULL) OR (`CANTIDAD DISPONIBLE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CANTIDAD_DISPONIBLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD DISPONIBLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CANTIDAD_DISPONIBLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD DISPONIBLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `REPUESTOS DISPONIBLES` (`REFERENCIA DE REPUESTO`, `NOMBRE DEL REPUES"& _ 
                "TO`, `CANTIDAD DISPONIBLE`) VALUES (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CANTIDAD_DISPONIBLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD DISPONIBLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `REPUESTOS DISPONIBLES` SET `REFERENCIA DE REPUESTO` = ?, `NOMBRE DEL REPU"& _ 
                "ESTO` = ?, `CANTIDAD DISPONIBLE` = ? WHERE ((`REFERENCIA DE REPUESTO` = ?) AND ("& _ 
                "(? = 1 AND `NOMBRE DEL REPUESTO` IS NULL) OR (`NOMBRE DEL REPUESTO` = ?)) AND (("& _ 
                "? = 1 AND `CANTIDAD DISPONIBLE` IS NULL) OR (`CANTIDAD DISPONIBLE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CANTIDAD_DISPONIBLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD DISPONIBLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CANTIDAD_DISPONIBLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD DISPONIBLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CANTIDAD_DISPONIBLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD DISPONIBLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.Mantenimiento.My.MySettings.Default.BASE_DE_DATOSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [REFERENCIA DE REPUESTO], [NOMBRE DEL REPUESTO], [CANTIDAD DISPONIBLE] FRO"& _ 
                "M [REPUESTOS DISPONIBLES]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BASE_DE_DATOSDataSet.REPUESTOS_DISPONIBLESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BASE_DE_DATOSDataSet.REPUESTOS_DISPONIBLESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BASE_DE_DATOSDataSet.REPUESTOS_DISPONIBLESDataTable = New BASE_DE_DATOSDataSet.REPUESTOS_DISPONIBLESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BASE_DE_DATOSDataSet.REPUESTOS_DISPONIBLESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "REPUESTOS DISPONIBLES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_REFERENCIA_DE_REPUESTO As Integer, ByVal Original_NOMBRE_DEL_REPUESTO As String, ByVal Original_CANTIDAD_DISPONIBLE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_REFERENCIA_DE_REPUESTO,Integer)
            If (Original_NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NOMBRE_DEL_REPUESTO,String)
            End If
            If (Original_CANTIDAD_DISPONIBLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CANTIDAD_DISPONIBLE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal REFERENCIA_DE_REPUESTO As Integer, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD_DISPONIBLE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(REFERENCIA_DE_REPUESTO,Integer)
            If (NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE_DEL_REPUESTO,String)
            End If
            If (CANTIDAD_DISPONIBLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CANTIDAD_DISPONIBLE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal REFERENCIA_DE_REPUESTO As Integer, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD_DISPONIBLE As Global.System.Nullable(Of Integer), ByVal Original_REFERENCIA_DE_REPUESTO As Integer, ByVal Original_NOMBRE_DEL_REPUESTO As String, ByVal Original_CANTIDAD_DISPONIBLE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(REFERENCIA_DE_REPUESTO,Integer)
            If (NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_DEL_REPUESTO,String)
            End If
            If (CANTIDAD_DISPONIBLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CANTIDAD_DISPONIBLE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_REFERENCIA_DE_REPUESTO,Integer)
            If (Original_NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_NOMBRE_DEL_REPUESTO,String)
            End If
            If (Original_CANTIDAD_DISPONIBLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CANTIDAD_DISPONIBLE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD_DISPONIBLE As Global.System.Nullable(Of Integer), ByVal Original_REFERENCIA_DE_REPUESTO As Integer, ByVal Original_NOMBRE_DEL_REPUESTO As String, ByVal Original_CANTIDAD_DISPONIBLE As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_REFERENCIA_DE_REPUESTO, NOMBRE_DEL_REPUESTO, CANTIDAD_DISPONIBLE, Original_REFERENCIA_DE_REPUESTO, Original_NOMBRE_DEL_REPUESTO, Original_CANTIDAD_DISPONIBLE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SOLICITUD_DE_REPUESTOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SOLICITUD DE REPUESTOS"
            tableMapping.ColumnMappings.Add("CODIGO DE LA MAQUINA", "CODIGO DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("NOMBRE DE LA MAQUINA", "NOMBRE DE LA MAQUINA")
            tableMapping.ColumnMappings.Add("REFERENCIA DE REPUESTO", "REFERENCIA DE REPUESTO")
            tableMapping.ColumnMappings.Add("NOMBRE DEL REPUESTO", "NOMBRE DEL REPUESTO")
            tableMapping.ColumnMappings.Add("CANTIDAD", "CANTIDAD")
            tableMapping.ColumnMappings.Add("NOMBRE DE QUIEN SOLICITA", "NOMBRE DE QUIEN SOLICITA")
            tableMapping.ColumnMappings.Add("FECHA DE SOLICITUD", "FECHA DE SOLICITUD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `SOLICITUD DE REPUESTOS` WHERE (((? = 1 AND `CODIGO DE LA MAQUINA` IS"& _ 
                " NULL) OR (`CODIGO DE LA MAQUINA` = ?)) AND ((? = 1 AND `NOMBRE DE LA MAQUINA` I"& _ 
                "S NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND ((? = 1 AND `REFERENCIA DE REPUESTO"& _ 
                "` IS NULL) OR (`REFERENCIA DE REPUESTO` = ?)) AND ((? = 1 AND `NOMBRE DEL REPUES"& _ 
                "TO` IS NULL) OR (`NOMBRE DEL REPUESTO` = ?)) AND ((? = 1 AND `CANTIDAD` IS NULL)"& _ 
                " OR (`CANTIDAD` = ?)) AND ((? = 1 AND `NOMBRE DE QUIEN SOLICITA` IS NULL) OR (`N"& _ 
                "OMBRE DE QUIEN SOLICITA` = ?)) AND (`FECHA DE SOLICITUD` = ?))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CANTIDAD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CANTIDAD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_QUIEN_SOLICITA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE QUIEN SOLICITA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_QUIEN_SOLICITA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE QUIEN SOLICITA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_SOLICITUD", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE SOLICITUD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `SOLICITUD DE REPUESTOS` (`CODIGO DE LA MAQUINA`, `NOMBRE DE LA MAQUI"& _ 
                "NA`, `REFERENCIA DE REPUESTO`, `NOMBRE DEL REPUESTO`, `CANTIDAD`, `NOMBRE DE QUI"& _ 
                "EN SOLICITA`, `FECHA DE SOLICITUD`) VALUES (?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CANTIDAD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_QUIEN_SOLICITA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE QUIEN SOLICITA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_SOLICITUD", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE SOLICITUD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `SOLICITUD DE REPUESTOS` SET `CODIGO DE LA MAQUINA` = ?, `NOMBRE DE LA MAQ"& _ 
                "UINA` = ?, `REFERENCIA DE REPUESTO` = ?, `NOMBRE DEL REPUESTO` = ?, `CANTIDAD` ="& _ 
                " ?, `NOMBRE DE QUIEN SOLICITA` = ?, `FECHA DE SOLICITUD` = ? WHERE (((? = 1 AND "& _ 
                "`CODIGO DE LA MAQUINA` IS NULL) OR (`CODIGO DE LA MAQUINA` = ?)) AND ((? = 1 AND"& _ 
                " `NOMBRE DE LA MAQUINA` IS NULL) OR (`NOMBRE DE LA MAQUINA` = ?)) AND ((? = 1 AN"& _ 
                "D `REFERENCIA DE REPUESTO` IS NULL) OR (`REFERENCIA DE REPUESTO` = ?)) AND ((? ="& _ 
                " 1 AND `NOMBRE DEL REPUESTO` IS NULL) OR (`NOMBRE DEL REPUESTO` = ?)) AND ((? = "& _ 
                "1 AND `CANTIDAD` IS NULL) OR (`CANTIDAD` = ?)) AND ((? = 1 AND `NOMBRE DE QUIEN "& _ 
                "SOLICITA` IS NULL) OR (`NOMBRE DE QUIEN SOLICITA` = ?)) AND (`FECHA DE SOLICITUD"& _ 
                "` = ?))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CANTIDAD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOMBRE_DE_QUIEN_SOLICITA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE QUIEN SOLICITA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FECHA_DE_SOLICITUD", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE SOLICITUD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CODIGO_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CODIGO DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_LA_MAQUINA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE LA MAQUINA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REFERENCIA_DE_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REFERENCIA DE REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DEL_REPUESTO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DEL REPUESTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CANTIDAD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CANTIDAD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CANTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOMBRE_DE_QUIEN_SOLICITA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE QUIEN SOLICITA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOMBRE_DE_QUIEN_SOLICITA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOMBRE DE QUIEN SOLICITA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FECHA_DE_SOLICITUD", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FECHA DE SOLICITUD", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.Mantenimiento.My.MySettings.Default.BASE_DE_DATOSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CODIGO DE LA MAQUINA], [NOMBRE DE LA MAQUINA], [REFERENCIA DE REPUESTO], "& _ 
                "[NOMBRE DEL REPUESTO], CANTIDAD, [NOMBRE DE QUIEN SOLICITA], [FECHA DE SOLICITUD"& _ 
                "] FROM [SOLICITUD DE REPUESTOS]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BASE_DE_DATOSDataSet.SOLICITUD_DE_REPUESTOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BASE_DE_DATOSDataSet.SOLICITUD_DE_REPUESTOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BASE_DE_DATOSDataSet.SOLICITUD_DE_REPUESTOSDataTable = New BASE_DE_DATOSDataSet.SOLICITUD_DE_REPUESTOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BASE_DE_DATOSDataSet.SOLICITUD_DE_REPUESTOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SOLICITUD DE REPUESTOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_DE_LA_MAQUINA As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_REFERENCIA_DE_REPUESTO As String, ByVal Original_NOMBRE_DEL_REPUESTO As String, ByVal Original_CANTIDAD As Global.System.Nullable(Of Integer), ByVal Original_NOMBRE_DE_QUIEN_SOLICITA As String, ByVal Original_FECHA_DE_SOLICITUD As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_DE_LA_MAQUINA,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_REFERENCIA_DE_REPUESTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_REFERENCIA_DE_REPUESTO,String)
            End If
            If (Original_NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_NOMBRE_DEL_REPUESTO,String)
            End If
            If (Original_CANTIDAD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CANTIDAD.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_NOMBRE_DE_QUIEN_SOLICITA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_NOMBRE_DE_QUIEN_SOLICITA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FECHA_DE_SOLICITUD,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal REFERENCIA_DE_REPUESTO As String, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD As Global.System.Nullable(Of Integer), ByVal NOMBRE_DE_QUIEN_SOLICITA As String, ByVal FECHA_DE_SOLICITUD As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_DE_LA_MAQUINA,Integer)
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (REFERENCIA_DE_REPUESTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(REFERENCIA_DE_REPUESTO,String)
            End If
            If (NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NOMBRE_DEL_REPUESTO,String)
            End If
            If (CANTIDAD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CANTIDAD.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE_DE_QUIEN_SOLICITA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(NOMBRE_DE_QUIEN_SOLICITA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_DE_SOLICITUD,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal REFERENCIA_DE_REPUESTO As String, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD As Global.System.Nullable(Of Integer), ByVal NOMBRE_DE_QUIEN_SOLICITA As String, ByVal FECHA_DE_SOLICITUD As Date, ByVal Original_CODIGO_DE_LA_MAQUINA As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_REFERENCIA_DE_REPUESTO As String, ByVal Original_NOMBRE_DEL_REPUESTO As String, ByVal Original_CANTIDAD As Global.System.Nullable(Of Integer), ByVal Original_NOMBRE_DE_QUIEN_SOLICITA As String, ByVal Original_FECHA_DE_SOLICITUD As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_DE_LA_MAQUINA,Integer)
            If (NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (REFERENCIA_DE_REPUESTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REFERENCIA_DE_REPUESTO,String)
            End If
            If (NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NOMBRE_DEL_REPUESTO,String)
            End If
            If (CANTIDAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CANTIDAD.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (NOMBRE_DE_QUIEN_SOLICITA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(NOMBRE_DE_QUIEN_SOLICITA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_DE_SOLICITUD,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CODIGO_DE_LA_MAQUINA,Integer)
            If (Original_NOMBRE_DE_LA_MAQUINA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_NOMBRE_DE_LA_MAQUINA,String)
            End If
            If (Original_REFERENCIA_DE_REPUESTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_REFERENCIA_DE_REPUESTO,String)
            End If
            If (Original_NOMBRE_DEL_REPUESTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_NOMBRE_DEL_REPUESTO,String)
            End If
            If (Original_CANTIDAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CANTIDAD.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_NOMBRE_DE_QUIEN_SOLICITA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_NOMBRE_DE_QUIEN_SOLICITA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FECHA_DE_SOLICITUD,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_DE_LA_MAQUINA As Integer, ByVal NOMBRE_DE_LA_MAQUINA As String, ByVal REFERENCIA_DE_REPUESTO As String, ByVal NOMBRE_DEL_REPUESTO As String, ByVal CANTIDAD As Global.System.Nullable(Of Integer), ByVal NOMBRE_DE_QUIEN_SOLICITA As String, ByVal Original_CODIGO_DE_LA_MAQUINA As Integer, ByVal Original_NOMBRE_DE_LA_MAQUINA As String, ByVal Original_REFERENCIA_DE_REPUESTO As String, ByVal Original_NOMBRE_DEL_REPUESTO As String, ByVal Original_CANTIDAD As Global.System.Nullable(Of Integer), ByVal Original_NOMBRE_DE_QUIEN_SOLICITA As String, ByVal Original_FECHA_DE_SOLICITUD As Date) As Integer
            Return Me.Update(CODIGO_DE_LA_MAQUINA, NOMBRE_DE_LA_MAQUINA, REFERENCIA_DE_REPUESTO, NOMBRE_DEL_REPUESTO, CANTIDAD, NOMBRE_DE_QUIEN_SOLICITA, Original_FECHA_DE_SOLICITUD, Original_CODIGO_DE_LA_MAQUINA, Original_NOMBRE_DE_LA_MAQUINA, Original_REFERENCIA_DE_REPUESTO, Original_NOMBRE_DEL_REPUESTO, Original_CANTIDAD, Original_NOMBRE_DE_QUIEN_SOLICITA, Original_FECHA_DE_SOLICITUD)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter
        
        Private _hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter As HOJA_DE_VIDA_DE_LA_MAQUINATableAdapter
        
        Private _oRDEN_DE_TRABAJOTableAdapter As ORDEN_DE_TRABAJOTableAdapter
        
        Private _rEGISTRO_DE_MANTENIMIENTOTableAdapter As REGISTRO_DE_MANTENIMIENTOTableAdapter
        
        Private _rEPUESTOS_DISPONIBLESTableAdapter As REPUESTOS_DISPONIBLESTableAdapter
        
        Private _sOLICITUD_DE_REPUESTOSTableAdapter As SOLICITUD_DE_REPUESTOSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter() As CARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter
            Get
                Return Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter
            End Get
            Set
                Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property HOJA_DE_VIDA_DE_LA_MAQUINATableAdapter() As HOJA_DE_VIDA_DE_LA_MAQUINATableAdapter
            Get
                Return Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter
            End Get
            Set
                Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ORDEN_DE_TRABAJOTableAdapter() As ORDEN_DE_TRABAJOTableAdapter
            Get
                Return Me._oRDEN_DE_TRABAJOTableAdapter
            End Get
            Set
                Me._oRDEN_DE_TRABAJOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property REGISTRO_DE_MANTENIMIENTOTableAdapter() As REGISTRO_DE_MANTENIMIENTOTableAdapter
            Get
                Return Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter
            End Get
            Set
                Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property REPUESTOS_DISPONIBLESTableAdapter() As REPUESTOS_DISPONIBLESTableAdapter
            Get
                Return Me._rEPUESTOS_DISPONIBLESTableAdapter
            End Get
            Set
                Me._rEPUESTOS_DISPONIBLESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SOLICITUD_DE_REPUESTOSTableAdapter() As SOLICITUD_DE_REPUESTOSTableAdapter
            Get
                Return Me._sOLICITUD_DE_REPUESTOSTableAdapter
            End Get
            Set
                Me._sOLICITUD_DE_REPUESTOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Connection) Is Nothing)) Then
                    Return Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Connection
                End If
                If ((Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Connection) Is Nothing)) Then
                    Return Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Connection
                End If
                If ((Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oRDEN_DE_TRABAJOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oRDEN_DE_TRABAJOTableAdapter.Connection
                End If
                If ((Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Connection
                End If
                If ((Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rEPUESTOS_DISPONIBLESTableAdapter.Connection
                End If
                If ((Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sOLICITUD_DE_REPUESTOSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As BASE_DE_DATOSDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.HOJA_DE_VIDA_DE_LA_MAQUINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ORDEN_DE_TRABAJO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oRDEN_DE_TRABAJOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.REGISTRO_DE_MANTENIMIENTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.REPUESTOS_DISPONIBLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rEPUESTOS_DISPONIBLESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SOLICITUD_DE_REPUESTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sOLICITUD_DE_REPUESTOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As BASE_DE_DATOSDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.HOJA_DE_VIDA_DE_LA_MAQUINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ORDEN_DE_TRABAJO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oRDEN_DE_TRABAJOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.REGISTRO_DE_MANTENIMIENTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.REPUESTOS_DISPONIBLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rEPUESTOS_DISPONIBLESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SOLICITUD_DE_REPUESTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sOLICITUD_DE_REPUESTOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As BASE_DE_DATOSDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SOLICITUD_DE_REPUESTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sOLICITUD_DE_REPUESTOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.REPUESTOS_DISPONIBLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rEPUESTOS_DISPONIBLESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.REGISTRO_DE_MANTENIMIENTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ORDEN_DE_TRABAJO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oRDEN_DE_TRABAJOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.HOJA_DE_VIDA_DE_LA_MAQUINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CARACTERISTICAS_TECNICAS_DE_LA_MAQUINA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As BASE_DE_DATOSDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oRDEN_DE_TRABAJOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rEPUESTOS_DISPONIBLESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sOLICITUD_DE_REPUESTOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter, Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Connection)
                    Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter, Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Connection)
                    Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oRDEN_DE_TRABAJOTableAdapter, Me._oRDEN_DE_TRABAJOTableAdapter.Connection)
                    Me._oRDEN_DE_TRABAJOTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._oRDEN_DE_TRABAJOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._oRDEN_DE_TRABAJOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oRDEN_DE_TRABAJOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oRDEN_DE_TRABAJOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter, Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Connection)
                    Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rEPUESTOS_DISPONIBLESTableAdapter, Me._rEPUESTOS_DISPONIBLESTableAdapter.Connection)
                    Me._rEPUESTOS_DISPONIBLESTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._rEPUESTOS_DISPONIBLESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._rEPUESTOS_DISPONIBLESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rEPUESTOS_DISPONIBLESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rEPUESTOS_DISPONIBLESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sOLICITUD_DE_REPUESTOSTableAdapter, Me._sOLICITUD_DE_REPUESTOSTableAdapter.Connection)
                    Me._sOLICITUD_DE_REPUESTOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._sOLICITUD_DE_REPUESTOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._sOLICITUD_DE_REPUESTOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sOLICITUD_DE_REPUESTOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sOLICITUD_DE_REPUESTOSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                    Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Connection = CType(revertConnections(Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._cARACTERISTICAS_TECNICAS_DE_LA_MAQUINATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter) Is Nothing) Then
                    Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Connection = CType(revertConnections(Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._hOJA_DE_VIDA_DE_LA_MAQUINATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oRDEN_DE_TRABAJOTableAdapter) Is Nothing) Then
                    Me._oRDEN_DE_TRABAJOTableAdapter.Connection = CType(revertConnections(Me._oRDEN_DE_TRABAJOTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._oRDEN_DE_TRABAJOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter) Is Nothing) Then
                    Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Connection = CType(revertConnections(Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._rEGISTRO_DE_MANTENIMIENTOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rEPUESTOS_DISPONIBLESTableAdapter) Is Nothing) Then
                    Me._rEPUESTOS_DISPONIBLESTableAdapter.Connection = CType(revertConnections(Me._rEPUESTOS_DISPONIBLESTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._rEPUESTOS_DISPONIBLESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sOLICITUD_DE_REPUESTOSTableAdapter) Is Nothing) Then
                    Me._sOLICITUD_DE_REPUESTOSTableAdapter.Connection = CType(revertConnections(Me._sOLICITUD_DE_REPUESTOSTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._sOLICITUD_DE_REPUESTOSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
